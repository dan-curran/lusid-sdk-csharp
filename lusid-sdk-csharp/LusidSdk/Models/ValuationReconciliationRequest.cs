// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ValuationReconciliationRequest
    {
        /// <summary>
        /// Initializes a new instance of the ValuationReconciliationRequest
        /// class.
        /// </summary>
        public ValuationReconciliationRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ValuationReconciliationRequest
        /// class.
        /// </summary>
        /// <param name="portfolioId">The id of the portfolio on which to run
        /// the aggregation request</param>
        /// <param name="aggregation">The specification of the aggregation
        /// request to be used to obtain the risk</param>
        public ValuationReconciliationRequest(ResourceId portfolioId, AggregationRequest aggregation)
        {
            PortfolioId = portfolioId;
            Aggregation = aggregation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the id of the portfolio on which to run the
        /// aggregation request
        /// </summary>
        [JsonProperty(PropertyName = "portfolioId")]
        public ResourceId PortfolioId { get; set; }

        /// <summary>
        /// Gets or sets the specification of the aggregation request to be
        /// used to obtain the risk
        /// </summary>
        [JsonProperty(PropertyName = "aggregation")]
        public AggregationRequest Aggregation { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PortfolioId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PortfolioId");
            }
            if (Aggregation == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Aggregation");
            }
            if (Aggregation != null)
            {
                Aggregation.Validate();
            }
        }
    }
}
