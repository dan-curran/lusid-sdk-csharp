// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class UpdateInstrumentIdentifierRequest
    {
        /// <summary>
        /// Initializes a new instance of the UpdateInstrumentIdentifierRequest
        /// class.
        /// </summary>
        public UpdateInstrumentIdentifierRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UpdateInstrumentIdentifierRequest
        /// class.
        /// </summary>
        /// <param name="type">The type of the identifier to upsert. This must
        /// be one of the code types marked as
        /// allowable for instrument identifiers. Possible values include:
        /// 'Undefined', 'LusidInstrumentId', 'ReutersAssetId', 'CINS', 'Isin',
        /// 'Sedol', 'Cusip', 'Ticker', 'ClientInternal', 'Figi',
        /// 'CompositeFigi', 'ShareClassFigi', 'Wertpapier', 'RIC',
        /// 'QuotePermId'</param>
        /// <param name="value">The value of the identifier. If set to `null`,
        /// this will remove the identifier completely.
        /// Note that, if an instrument only has one identifier, it is an error
        /// to remove this.</param>
        /// <param name="effectiveAt">The date at which the identifier
        /// modification is to be effective from. If unset, will
        /// default to `now`.</param>
        public UpdateInstrumentIdentifierRequest(string type = default(string), string value = default(string), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?))
        {
            Type = type;
            Value = value;
            EffectiveAt = effectiveAt;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the type of the identifier to upsert. This must be one
        /// of the code types marked as
        /// allowable for instrument identifiers. Possible values include:
        /// 'Undefined', 'LusidInstrumentId', 'ReutersAssetId', 'CINS', 'Isin',
        /// 'Sedol', 'Cusip', 'Ticker', 'ClientInternal', 'Figi',
        /// 'CompositeFigi', 'ShareClassFigi', 'Wertpapier', 'RIC',
        /// 'QuotePermId'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the value of the identifier. If set to `null`, this
        /// will remove the identifier completely.
        /// Note that, if an instrument only has one identifier, it is an error
        /// to remove this.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Gets or sets the date at which the identifier modification is to be
        /// effective from. If unset, will
        /// default to `now`.
        /// </summary>
        [JsonProperty(PropertyName = "effectiveAt")]
        public System.DateTimeOffset? EffectiveAt { get; set; }

    }
}
