// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Link
    {
        /// <summary>
        /// Initializes a new instance of the Link class.
        /// </summary>
        public Link()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Link class.
        /// </summary>
        /// <param name="relation">Possible values include: 'Root',
        /// 'Properties', 'Transactions', 'Details', 'Constituents',
        /// 'Holdings', 'Commands', 'HoldingsAdjustments', 'Parent',
        /// 'PropertySchema', 'EntitySchema', 'Quote',
        /// 'ConstituentsAdjustments'</param>
        /// <param name="method">Possible values include: 'POST', 'GET',
        /// 'PATCH', 'DELETE'</param>
        public Link(string relation, string href, string method, string description = default(string))
        {
            Relation = relation;
            Href = href;
            Description = description;
            Method = method;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'Root', 'Properties',
        /// 'Transactions', 'Details', 'Constituents', 'Holdings', 'Commands',
        /// 'HoldingsAdjustments', 'Parent', 'PropertySchema', 'EntitySchema',
        /// 'Quote', 'ConstituentsAdjustments'
        /// </summary>
        [JsonProperty(PropertyName = "relation")]
        public string Relation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "href")]
        public string Href { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'POST', 'GET', 'PATCH',
        /// 'DELETE'
        /// </summary>
        [JsonProperty(PropertyName = "method")]
        public string Method { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Relation == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Relation");
            }
            if (Href == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Href");
            }
            if (Method == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Method");
            }
        }
    }
}
