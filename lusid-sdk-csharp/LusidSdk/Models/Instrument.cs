// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Instrument
    {
        /// <summary>
        /// Initializes a new instance of the Instrument class.
        /// </summary>
        public Instrument()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Instrument class.
        /// </summary>
        /// <param name="lusidInstrumentId">The lusid instrument id (LUID) of
        /// the instrument</param>
        /// <param name="version">The version of the instrument</param>
        /// <param name="name">The name of the instrument</param>
        /// <param name="identifiers">The set of identifiers that can be used
        /// to uniquely identify the instrument</param>
        /// <param name="properties">Any requested instrument properties. If no
        /// property can be found for the instrument, then
        /// a value of 'Unknown' will be returned</param>
        /// <param name="lookthroughPortfolio">The lookthrough portfolio of the
        /// instrument (if any).</param>
        public Instrument(string href = default(string), string lusidInstrumentId = default(string), Version version = default(Version), string name = default(string), IDictionary<string, string> identifiers = default(IDictionary<string, string>), IList<Property> properties = default(IList<Property>), ResourceId lookthroughPortfolio = default(ResourceId), IList<Link> links = default(IList<Link>))
        {
            Href = href;
            LusidInstrumentId = lusidInstrumentId;
            Version = version;
            Name = name;
            Identifiers = identifiers;
            Properties = properties;
            LookthroughPortfolio = lookthroughPortfolio;
            Links = links;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "href")]
        public string Href { get; set; }

        /// <summary>
        /// Gets or sets the lusid instrument id (LUID) of the instrument
        /// </summary>
        [JsonProperty(PropertyName = "lusidInstrumentId")]
        public string LusidInstrumentId { get; set; }

        /// <summary>
        /// Gets or sets the version of the instrument
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public Version Version { get; set; }

        /// <summary>
        /// Gets or sets the name of the instrument
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the set of identifiers that can be used to uniquely
        /// identify the instrument
        /// </summary>
        [JsonProperty(PropertyName = "identifiers")]
        public IDictionary<string, string> Identifiers { get; set; }

        /// <summary>
        /// Gets or sets any requested instrument properties. If no property
        /// can be found for the instrument, then
        /// a value of 'Unknown' will be returned
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IList<Property> Properties { get; set; }

        /// <summary>
        /// Gets or sets the lookthrough portfolio of the instrument (if any).
        /// </summary>
        [JsonProperty(PropertyName = "lookthroughPortfolio")]
        public ResourceId LookthroughPortfolio { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "links")]
        public IList<Link> Links { get; set; }

    }
}
