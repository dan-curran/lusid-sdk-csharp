// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class UpsertInstrumentPropertyRequest
    {
        /// <summary>
        /// Initializes a new instance of the UpsertInstrumentPropertyRequest
        /// class.
        /// </summary>
        public UpsertInstrumentPropertyRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UpsertInstrumentPropertyRequest
        /// class.
        /// </summary>
        /// <param name="instrumentPropertyKey">The property key of the
        /// property, e.g, 'Instrument/default/Isin'</param>
        /// <param name="property">The value of the property, which must not be
        /// empty or null. e.g, 'US0378331005'</param>
        public UpsertInstrumentPropertyRequest(string instrumentPropertyKey = default(string), PropertyValue property = default(PropertyValue))
        {
            InstrumentPropertyKey = instrumentPropertyKey;
            Property = property;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the property key of the property, e.g,
        /// 'Instrument/default/Isin'
        /// </summary>
        [JsonProperty(PropertyName = "instrumentPropertyKey")]
        public string InstrumentPropertyKey { get; set; }

        /// <summary>
        /// Gets or sets the value of the property, which must not be empty or
        /// null. e.g, 'US0378331005'
        /// </summary>
        [JsonProperty(PropertyName = "property")]
        public PropertyValue Property { get; set; }

    }
}
