// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class CreateResults
    {
        /// <summary>
        /// Initializes a new instance of the CreateResults class.
        /// </summary>
        public CreateResults()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreateResults class.
        /// </summary>
        /// <param name="key">The key is a unique point in 'run' space. For a
        /// given scope and time point, one would wish to
        /// identify a unique result set for a given recipe. In essence, this
        /// key is the unique identifier for the tuple (recipe,portfolios)
        /// However, that only matters when one is trying to use it
        /// automatically to retrieve them.
        /// A question becomes whether we would wish to store groups of
        /// protfolio results together, or only single ones.
        /// Also, whether we would accept uploading of groups and then split
        /// them apart.</param>
        /// <param name="format">Possible values include: 'DataReader',
        /// 'Portfolio'</param>
        public CreateResults(string data = default(string), string scope = default(string), string key = default(string), System.DateTimeOffset? date = default(System.DateTimeOffset?), string format = default(string))
        {
            Data = data;
            Scope = scope;
            Key = key;
            Date = date;
            Format = format;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "data")]
        public string Data { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or sets the key is a unique point in 'run' space. For a given
        /// scope and time point, one would wish to
        /// identify a unique result set for a given recipe. In essence, this
        /// key is the unique identifier for the tuple (recipe,portfolios)
        /// However, that only matters when one is trying to use it
        /// automatically to retrieve them.
        /// A question becomes whether we would wish to store groups of
        /// protfolio results together, or only single ones.
        /// Also, whether we would accept uploading of groups and then split
        /// them apart.
        /// </summary>
        [JsonProperty(PropertyName = "key")]
        public string Key { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "date")]
        public System.DateTimeOffset? Date { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'DataReader', 'Portfolio'
        /// </summary>
        [JsonProperty(PropertyName = "format")]
        public string Format { get; set; }

    }
}
