// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class QuoteId
    {
        /// <summary>
        /// Initializes a new instance of the QuoteId class.
        /// </summary>
        public QuoteId()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QuoteId class.
        /// </summary>
        /// <param name="instrumentIdType">Possible values include:
        /// 'LusidInstrumentId', 'Figi', 'RIC', 'QuotePermId', 'Isin',
        /// 'CurrencyPair'</param>
        /// <param name="quoteType">Possible values include: 'Price', 'Spread',
        /// 'Rate'</param>
        /// <param name="priceSide">Possible values include: 'Bid', 'Mid',
        /// 'Ask'</param>
        public QuoteId(string instrumentId, string instrumentIdType, string quoteType, string priceSide)
        {
            InstrumentId = instrumentId;
            InstrumentIdType = instrumentIdType;
            QuoteType = quoteType;
            PriceSide = priceSide;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "instrumentId")]
        public string InstrumentId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'LusidInstrumentId', 'Figi',
        /// 'RIC', 'QuotePermId', 'Isin', 'CurrencyPair'
        /// </summary>
        [JsonProperty(PropertyName = "instrumentIdType")]
        public string InstrumentIdType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Price', 'Spread', 'Rate'
        /// </summary>
        [JsonProperty(PropertyName = "quoteType")]
        public string QuoteType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Bid', 'Mid', 'Ask'
        /// </summary>
        [JsonProperty(PropertyName = "priceSide")]
        public string PriceSide { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (InstrumentId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "InstrumentId");
            }
            if (InstrumentIdType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "InstrumentIdType");
            }
            if (QuoteType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "QuoteType");
            }
            if (PriceSide == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PriceSide");
            }
        }
    }
}
