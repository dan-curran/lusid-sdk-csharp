// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ErrorResponse
    {
        /// <summary>
        /// Initializes a new instance of the ErrorResponse class.
        /// </summary>
        public ErrorResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ErrorResponse class.
        /// </summary>
        /// <param name="code">Possible values include: 'Unknown',
        /// 'VersionNotFound', 'InstrumentNotFound', 'PropertyNotFound',
        /// 'PortfolioRecursionDepth', 'GroupNotFound', 'PortfolioNotFound',
        /// 'PropertySchemaNotFound', 'PortfolioAncestryNotFound',
        /// 'PortfolioWithIdAlreadyExists', 'OrphanedPortfolio',
        /// 'MissingBaseClaims', 'PropertyNotDefined',
        /// 'CannotDeleteSystemProperty', 'CannotModifyImmutablePropertyField',
        /// 'PropertyAlreadyExists', 'InvalidPropertyLifeTime',
        /// 'CannotModifyDefaultDataType', 'GroupAlreadyExists',
        /// 'NoSuchDataType', 'ValidationError',
        /// 'LoopDetectedInGroupHierarchy', 'SubGroupAlreadyExists',
        /// 'PriceSourceNotFound', 'AnalyticStoreNotFound',
        /// 'AnalyticStoreAlreadyExists', 'ClientInstrumentAlreadyExists',
        /// 'DuplicateInParameterSet', 'ResultsNotFound',
        /// 'OrderFieldNotInResultSet', 'OperationFailed',
        /// 'ElasticSearchError', 'InvalidParameterValue',
        /// 'CommandProcessingFailure', 'EntityStateConstructionFailure',
        /// 'EntityTimelineDoesNotExist', 'EventPublishFailure',
        /// 'InvalidRequestFailure', 'EventPublishUnknown',
        /// 'EventQueryFailure', 'BlobDidNotExistFailure',
        /// 'SubSystemRequestFailure', 'SubSystemConfigurationFailure',
        /// 'FailedToDelete', 'UpsertClientInstrumentFailure',
        /// 'IllegalAsAtInterval', 'IllegalBitemporalQuery',
        /// 'InvalidAlternateId', 'CannotAddSourcePortfolioPropertyExplicitly',
        /// 'EntityAlreadyExistsInGroup', 'EntityWithIdAlreadyExists',
        /// 'PortfolioDetailsDoNotExist', 'PortfolioWithNameAlreadyExists',
        /// 'InvalidTransactions', 'ReferencePortfolioNotFound',
        /// 'DuplicateIdFailure', 'CommandRetrievalFailure',
        /// 'DataFilterApplicationFailure', 'SearchFailed',
        /// 'MovementsEngineConfigurationKeyFailure', 'FxRateSourceNotFound',
        /// 'AccrualSourceNotFound', 'EntitlementsFailure',
        /// 'InvalidIdentityToken', 'InvalidRequestHeaders', 'PriceNotFound',
        /// 'InvalidSubHoldingKeysProvided', 'DuplicateSubHoldingKeysProvided',
        /// 'CutDefinitionNotFound', 'CutDefinitionInvalid',
        /// 'ServerConfigurationError', 'InvalidUnitForDataType',
        /// 'InvalidTypeForDataType', 'InvalidValueForDataType',
        /// 'UnitNotDefinedForDataType', 'UnitsNotSupportedOnDataType',
        /// 'CannotSpecifyUnitsOnDataType',
        /// 'UnitSchemaInconsistentWithDataType', 'UnitDefinitionNotSpecified',
        /// 'DuplicateUnitDefinitionsSpecified', 'InvalidUnitsDefinition',
        /// 'InvalidInstrumentIdentifierUnit',
        /// 'HoldingsAdjustmentDoesNotExist', 'CouldNotBuildExcelUrl',
        /// 'CouldNotGetExcelVersion', 'InstrumentByCodeNotFound',
        /// 'EntitySchemaDoesNotExist', 'FeatureNotSupportedOnPortfolioType',
        /// 'QuoteNotFoundFailure', 'ReferencePortfolioRequestNotSupported',
        /// 'TransactionPortfolioRequestNotSupported',
        /// 'InvalidInstrumentDefinition', 'InstrumentUpsertFailure',
        /// 'TransactionTypeNotFound', 'TransactionTypeDuplication',
        /// 'InvalidPropertyValueAssignment',
        /// 'PortfolioDoesNotExistAtGivenDate', 'QueryParserFailure',
        /// 'DependenciesFailure', 'PortfolioPreprocessFailure',
        /// 'ValuationEngineFailure', 'TaskFactoryFailure',
        /// 'TaskEvaluationFailure', 'InstrumentFailure', 'CashFlowsFailure',
        /// 'ResultRetrievalFailure', 'ResultProcessingFailure',
        /// 'VendorResultProcessingFailure',
        /// 'CannotSupplyTimesWithPortfoliosQuery',
        /// 'AttemptToUpsertDuplicateQuotes'</param>
        public ErrorResponse(int? status = default(int?), string code = default(string), string message = default(string), string detailedMessage = default(string), IList<ErrorDetailBase> items = default(IList<ErrorDetailBase>), string moreInfo = default(string))
        {
            Status = status;
            Code = code;
            Message = message;
            DetailedMessage = detailedMessage;
            Items = items;
            MoreInfo = moreInfo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public int? Status { get; private set; }

        /// <summary>
        /// Gets possible values include: 'Unknown', 'VersionNotFound',
        /// 'InstrumentNotFound', 'PropertyNotFound',
        /// 'PortfolioRecursionDepth', 'GroupNotFound', 'PortfolioNotFound',
        /// 'PropertySchemaNotFound', 'PortfolioAncestryNotFound',
        /// 'PortfolioWithIdAlreadyExists', 'OrphanedPortfolio',
        /// 'MissingBaseClaims', 'PropertyNotDefined',
        /// 'CannotDeleteSystemProperty', 'CannotModifyImmutablePropertyField',
        /// 'PropertyAlreadyExists', 'InvalidPropertyLifeTime',
        /// 'CannotModifyDefaultDataType', 'GroupAlreadyExists',
        /// 'NoSuchDataType', 'ValidationError',
        /// 'LoopDetectedInGroupHierarchy', 'SubGroupAlreadyExists',
        /// 'PriceSourceNotFound', 'AnalyticStoreNotFound',
        /// 'AnalyticStoreAlreadyExists', 'ClientInstrumentAlreadyExists',
        /// 'DuplicateInParameterSet', 'ResultsNotFound',
        /// 'OrderFieldNotInResultSet', 'OperationFailed',
        /// 'ElasticSearchError', 'InvalidParameterValue',
        /// 'CommandProcessingFailure', 'EntityStateConstructionFailure',
        /// 'EntityTimelineDoesNotExist', 'EventPublishFailure',
        /// 'InvalidRequestFailure', 'EventPublishUnknown',
        /// 'EventQueryFailure', 'BlobDidNotExistFailure',
        /// 'SubSystemRequestFailure', 'SubSystemConfigurationFailure',
        /// 'FailedToDelete', 'UpsertClientInstrumentFailure',
        /// 'IllegalAsAtInterval', 'IllegalBitemporalQuery',
        /// 'InvalidAlternateId', 'CannotAddSourcePortfolioPropertyExplicitly',
        /// 'EntityAlreadyExistsInGroup', 'EntityWithIdAlreadyExists',
        /// 'PortfolioDetailsDoNotExist', 'PortfolioWithNameAlreadyExists',
        /// 'InvalidTransactions', 'ReferencePortfolioNotFound',
        /// 'DuplicateIdFailure', 'CommandRetrievalFailure',
        /// 'DataFilterApplicationFailure', 'SearchFailed',
        /// 'MovementsEngineConfigurationKeyFailure', 'FxRateSourceNotFound',
        /// 'AccrualSourceNotFound', 'EntitlementsFailure',
        /// 'InvalidIdentityToken', 'InvalidRequestHeaders', 'PriceNotFound',
        /// 'InvalidSubHoldingKeysProvided', 'DuplicateSubHoldingKeysProvided',
        /// 'CutDefinitionNotFound', 'CutDefinitionInvalid',
        /// 'ServerConfigurationError', 'InvalidUnitForDataType',
        /// 'InvalidTypeForDataType', 'InvalidValueForDataType',
        /// 'UnitNotDefinedForDataType', 'UnitsNotSupportedOnDataType',
        /// 'CannotSpecifyUnitsOnDataType',
        /// 'UnitSchemaInconsistentWithDataType', 'UnitDefinitionNotSpecified',
        /// 'DuplicateUnitDefinitionsSpecified', 'InvalidUnitsDefinition',
        /// 'InvalidInstrumentIdentifierUnit',
        /// 'HoldingsAdjustmentDoesNotExist', 'CouldNotBuildExcelUrl',
        /// 'CouldNotGetExcelVersion', 'InstrumentByCodeNotFound',
        /// 'EntitySchemaDoesNotExist', 'FeatureNotSupportedOnPortfolioType',
        /// 'QuoteNotFoundFailure', 'ReferencePortfolioRequestNotSupported',
        /// 'TransactionPortfolioRequestNotSupported',
        /// 'InvalidInstrumentDefinition', 'InstrumentUpsertFailure',
        /// 'TransactionTypeNotFound', 'TransactionTypeDuplication',
        /// 'InvalidPropertyValueAssignment',
        /// 'PortfolioDoesNotExistAtGivenDate', 'QueryParserFailure',
        /// 'DependenciesFailure', 'PortfolioPreprocessFailure',
        /// 'ValuationEngineFailure', 'TaskFactoryFailure',
        /// 'TaskEvaluationFailure', 'InstrumentFailure', 'CashFlowsFailure',
        /// 'ResultRetrievalFailure', 'ResultProcessingFailure',
        /// 'VendorResultProcessingFailure',
        /// 'CannotSupplyTimesWithPortfoliosQuery',
        /// 'AttemptToUpsertDuplicateQuotes'
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "detailedMessage")]
        public string DetailedMessage { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "items")]
        public IList<ErrorDetailBase> Items { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "moreInfo")]
        public string MoreInfo { get; private set; }

    }
}
