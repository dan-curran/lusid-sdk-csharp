// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LUSIDAPI.
    /// </summary>
    public static partial class LUSIDAPIExtensions
    {
            /// <summary>
            /// List analytic stores
            /// </summary>
            /// <remarks>
            /// List all defined analytic stores
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            public static ResourceListOfAnalyticStoreKey ListAnalyticStores(this ILUSIDAPI operations, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.ListAnalyticStoresAsync(asAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List analytic stores
            /// </summary>
            /// <remarks>
            /// List all defined analytic stores
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfAnalyticStoreKey> ListAnalyticStoresAsync(this ILUSIDAPI operations, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAnalyticStoresWithHttpMessagesAsync(asAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create analytic store
            /// </summary>
            /// <remarks>
            /// Create a new analytic store for the specified scope and date
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// A populated analytic store definition
            /// </param>
            public static AnalyticStore CreateAnalyticStore(this ILUSIDAPI operations, CreateAnalyticStoreRequest request = default(CreateAnalyticStoreRequest))
            {
                return operations.CreateAnalyticStoreAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create analytic store
            /// </summary>
            /// <remarks>
            /// Create a new analytic store for the specified scope and date
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// A populated analytic store definition
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalyticStore> CreateAnalyticStoreAsync(this ILUSIDAPI operations, CreateAnalyticStoreRequest request = default(CreateAnalyticStoreRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAnalyticStoreWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get analytic store
            /// </summary>
            /// <remarks>
            /// Get the meta data associated with a specified scope and date combination
            /// (analytic store)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The analytics data scope
            /// </param>
            /// <param name='year'>
            /// The year component of the date for the data in the scope
            /// </param>
            /// <param name='month'>
            /// The month component of the date for the data in the scope
            /// </param>
            /// <param name='day'>
            /// The day component of the date for the data in the scope
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            public static AnalyticStore GetAnalyticStore(this ILUSIDAPI operations, string scope, int year, int month, int day, System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.GetAnalyticStoreAsync(scope, year, month, day, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get analytic store
            /// </summary>
            /// <remarks>
            /// Get the meta data associated with a specified scope and date combination
            /// (analytic store)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The analytics data scope
            /// </param>
            /// <param name='year'>
            /// The year component of the date for the data in the scope
            /// </param>
            /// <param name='month'>
            /// The month component of the date for the data in the scope
            /// </param>
            /// <param name='day'>
            /// The day component of the date for the data in the scope
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalyticStore> GetAnalyticStoreAsync(this ILUSIDAPI operations, string scope, int year, int month, int day, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAnalyticStoreWithHttpMessagesAsync(scope, year, month, day, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete analytic store
            /// </summary>
            /// <remarks>
            /// Delete stored analytic data in the specified scope for the specified date
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The analytics data scope
            /// </param>
            /// <param name='year'>
            /// The year component of the date
            /// </param>
            /// <param name='month'>
            /// The month component of the date
            /// </param>
            /// <param name='day'>
            /// The day component of the date
            /// </param>
            public static DeletedEntityResponse DeleteAnalyticStore(this ILUSIDAPI operations, string scope, int year, int month, int day)
            {
                return operations.DeleteAnalyticStoreAsync(scope, year, month, day).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete analytic store
            /// </summary>
            /// <remarks>
            /// Delete stored analytic data in the specified scope for the specified date
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The analytics data scope
            /// </param>
            /// <param name='year'>
            /// The year component of the date
            /// </param>
            /// <param name='month'>
            /// The month component of the date
            /// </param>
            /// <param name='day'>
            /// The day component of the date
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeleteAnalyticStoreAsync(this ILUSIDAPI operations, string scope, int year, int month, int day, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAnalyticStoreWithHttpMessagesAsync(scope, year, month, day, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set analytic data
            /// </summary>
            /// <remarks>
            /// Store the complete set of analytics for an existing analytic store for the
            /// specified scope and date
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data being stored
            /// </param>
            /// <param name='year'>
            /// The year component of the date for the data
            /// </param>
            /// <param name='month'>
            /// The month component of the date for the data
            /// </param>
            /// <param name='day'>
            /// The day component of the date for the data
            /// </param>
            /// <param name='data'>
            /// The analytic data being inserted
            /// </param>
            public static AnalyticStore SetAnalytics(this ILUSIDAPI operations, string scope, int year, int month, int day, IList<InstrumentAnalytic> data = default(IList<InstrumentAnalytic>))
            {
                return operations.SetAnalyticsAsync(scope, year, month, day, data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set analytic data
            /// </summary>
            /// <remarks>
            /// Store the complete set of analytics for an existing analytic store for the
            /// specified scope and date
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data being stored
            /// </param>
            /// <param name='year'>
            /// The year component of the date for the data
            /// </param>
            /// <param name='month'>
            /// The month component of the date for the data
            /// </param>
            /// <param name='day'>
            /// The day component of the date for the data
            /// </param>
            /// <param name='data'>
            /// The analytic data being inserted
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalyticStore> SetAnalyticsAsync(this ILUSIDAPI operations, string scope, int year, int month, int day, IList<InstrumentAnalytic> data = default(IList<InstrumentAnalytic>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetAnalyticsWithHttpMessagesAsync(scope, year, month, day, data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get corporate actions
            /// </summary>
            /// <remarks>
            /// Gets corporate actions from a specific corporate action source
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the corporate action source
            /// </param>
            /// <param name='code'>
            /// The code of the corporate action source
            /// </param>
            /// <param name='fromEffectiveAt'>
            /// Optional. The start effective date of the data range
            /// </param>
            /// <param name='toEffectiveAt'>
            /// Optional. The end effective date of the data range
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            public static ResourceListOfCorporateAction GetCorporateActions(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromEffectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? toEffectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.GetCorporateActionsAsync(scope, code, fromEffectiveAt, toEffectiveAt, asAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get corporate actions
            /// </summary>
            /// <remarks>
            /// Gets corporate actions from a specific corporate action source
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the corporate action source
            /// </param>
            /// <param name='code'>
            /// The code of the corporate action source
            /// </param>
            /// <param name='fromEffectiveAt'>
            /// Optional. The start effective date of the data range
            /// </param>
            /// <param name='toEffectiveAt'>
            /// Optional. The end effective date of the data range
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfCorporateAction> GetCorporateActionsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromEffectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? toEffectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCorporateActionsWithHttpMessagesAsync(scope, code, fromEffectiveAt, toEffectiveAt, asAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upsert corporate actions
            /// </summary>
            /// <remarks>
            /// Attempt to create/update one or more corporate action in a specified
            /// corporate action source. Failed actions will be identified in the body of
            /// the response.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of corporate action source
            /// </param>
            /// <param name='code'>
            /// The code of the corporate action source
            /// </param>
            /// <param name='actions'>
            /// The corporate action definitions
            /// </param>
            public static UpsertCorporateActionsResponse BatchUpsertCorporateActions(this ILUSIDAPI operations, string scope, string code, IList<CreateCorporateAction> actions = default(IList<CreateCorporateAction>))
            {
                return operations.BatchUpsertCorporateActionsAsync(scope, code, actions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upsert corporate actions
            /// </summary>
            /// <remarks>
            /// Attempt to create/update one or more corporate action in a specified
            /// corporate action source. Failed actions will be identified in the body of
            /// the response.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of corporate action source
            /// </param>
            /// <param name='code'>
            /// The code of the corporate action source
            /// </param>
            /// <param name='actions'>
            /// The corporate action definitions
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpsertCorporateActionsResponse> BatchUpsertCorporateActionsAsync(this ILUSIDAPI operations, string scope, string code, IList<CreateCorporateAction> actions = default(IList<CreateCorporateAction>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchUpsertCorporateActionsWithHttpMessagesAsync(scope, code, actions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create data type definition
            /// </summary>
            /// <remarks>
            /// Create a new data type definition
            ///
            /// Data types cannot be created in either the "default" or "system" scopes.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// The definition of the new data type
            /// </param>
            public static DataType CreateDataType(this ILUSIDAPI operations, CreateDataTypeRequest request = default(CreateDataTypeRequest))
            {
                return operations.CreateDataTypeAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create data type definition
            /// </summary>
            /// <remarks>
            /// Create a new data type definition
            ///
            /// Data types cannot be created in either the "default" or "system" scopes.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// The definition of the new data type
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataType> CreateDataTypeAsync(this ILUSIDAPI operations, CreateDataTypeRequest request = default(CreateDataTypeRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDataTypeWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List data types
            /// </summary>
            /// <remarks>
            /// List all data types in a specified scope
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The requested scope of the data types
            /// </param>
            /// <param name='includeDefault'>
            /// Whether to additionally include those data types in the "default" scope
            /// </param>
            /// <param name='includeSystem'>
            /// Whether to additionally include those data types in the "system" scope
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            public static ResourceListOfDataType ListDataTypes(this ILUSIDAPI operations, string scope, bool? includeDefault = default(bool?), bool? includeSystem = default(bool?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.ListDataTypesAsync(scope, includeDefault, includeSystem, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List data types
            /// </summary>
            /// <remarks>
            /// List all data types in a specified scope
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The requested scope of the data types
            /// </param>
            /// <param name='includeDefault'>
            /// Whether to additionally include those data types in the "default" scope
            /// </param>
            /// <param name='includeSystem'>
            /// Whether to additionally include those data types in the "system" scope
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfDataType> ListDataTypesAsync(this ILUSIDAPI operations, string scope, bool? includeDefault = default(bool?), bool? includeSystem = default(bool?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDataTypesWithHttpMessagesAsync(scope, includeDefault, includeSystem, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get data type definition
            /// </summary>
            /// <remarks>
            /// Get the definition of a specified data type
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data type
            /// </param>
            /// <param name='code'>
            /// The code of the data type
            /// </param>
            public static DataType GetDataType(this ILUSIDAPI operations, string scope, string code)
            {
                return operations.GetDataTypeAsync(scope, code).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get data type definition
            /// </summary>
            /// <remarks>
            /// Get the definition of a specified data type
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data type
            /// </param>
            /// <param name='code'>
            /// The code of the data type
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataType> GetDataTypeAsync(this ILUSIDAPI operations, string scope, string code, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataTypeWithHttpMessagesAsync(scope, code, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update data type definition
            /// </summary>
            /// <remarks>
            /// Update the definition of the specified existing data type
            ///
            /// Not all elements within a data type definition are modifiable due to the
            /// potential implications for data
            /// already stored against the types
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data type
            /// </param>
            /// <param name='code'>
            /// The code of the data type
            /// </param>
            /// <param name='request'>
            /// The updated definition of the data type
            /// </param>
            public static DataType UpdateDataType(this ILUSIDAPI operations, string scope, string code, UpdateDataTypeRequest request = default(UpdateDataTypeRequest))
            {
                return operations.UpdateDataTypeAsync(scope, code, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update data type definition
            /// </summary>
            /// <remarks>
            /// Update the definition of the specified existing data type
            ///
            /// Not all elements within a data type definition are modifiable due to the
            /// potential implications for data
            /// already stored against the types
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data type
            /// </param>
            /// <param name='code'>
            /// The code of the data type
            /// </param>
            /// <param name='request'>
            /// The updated definition of the data type
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataType> UpdateDataTypeAsync(this ILUSIDAPI operations, string scope, string code, UpdateDataTypeRequest request = default(UpdateDataTypeRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDataTypeWithHttpMessagesAsync(scope, code, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get units from data type
            /// </summary>
            /// <remarks>
            /// Get the definitions of the specified units associated bound to a specific
            /// data type
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data type
            /// </param>
            /// <param name='code'>
            /// The code of the data type
            /// </param>
            /// <param name='units'>
            /// One or more unit identifiers for which the definition is being requested
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            public static ResourceListOfIUnitDefinitionDto GetUnitsFromDataType(this ILUSIDAPI operations, string scope, string code, IList<string> units = default(IList<string>), string filter = default(string))
            {
                return operations.GetUnitsFromDataTypeAsync(scope, code, units, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get units from data type
            /// </summary>
            /// <remarks>
            /// Get the definitions of the specified units associated bound to a specific
            /// data type
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data type
            /// </param>
            /// <param name='code'>
            /// The code of the data type
            /// </param>
            /// <param name='units'>
            /// One or more unit identifiers for which the definition is being requested
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfIUnitDefinitionDto> GetUnitsFromDataTypeAsync(this ILUSIDAPI operations, string scope, string code, IList<string> units = default(IList<string>), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUnitsFromDataTypeWithHttpMessagesAsync(scope, code, units, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create derived transaction portfolio
            /// </summary>
            /// <remarks>
            /// Creates a transaction portfolio that derives from an existing transaction
            /// portfolio. In a derived portfolio, parts of the portfolio can either be
            /// specific to this portfolio, or can be inherited from a "parent". Different
            /// parts of the portfolio (e.g. transactions or properties) are combined in
            /// different ways. The portfolio details are either overridden in entirety, or
            /// not at all. The same is true for properties. Transactions on a derived
            /// portfolio are merged with its parent portfolio's transactions. If the
            /// parent portfolio is itself a derived portfolio, transactions from that
            /// parent are also merged (and that parent's portfolio's, if it is also a
            /// derived portfolio, and so on).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope into which to create the new derived portfolio
            /// </param>
            /// <param name='portfolio'>
            /// The root object of the new derived portfolio, containing a populated
            /// reference portfolio id and reference scope
            /// </param>
            public static Portfolio CreateDerivedPortfolio(this ILUSIDAPI operations, string scope, CreateDerivedTransactionPortfolioRequest portfolio = default(CreateDerivedTransactionPortfolioRequest))
            {
                return operations.CreateDerivedPortfolioAsync(scope, portfolio).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create derived transaction portfolio
            /// </summary>
            /// <remarks>
            /// Creates a transaction portfolio that derives from an existing transaction
            /// portfolio. In a derived portfolio, parts of the portfolio can either be
            /// specific to this portfolio, or can be inherited from a "parent". Different
            /// parts of the portfolio (e.g. transactions or properties) are combined in
            /// different ways. The portfolio details are either overridden in entirety, or
            /// not at all. The same is true for properties. Transactions on a derived
            /// portfolio are merged with its parent portfolio's transactions. If the
            /// parent portfolio is itself a derived portfolio, transactions from that
            /// parent are also merged (and that parent's portfolio's, if it is also a
            /// derived portfolio, and so on).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope into which to create the new derived portfolio
            /// </param>
            /// <param name='portfolio'>
            /// The root object of the new derived portfolio, containing a populated
            /// reference portfolio id and reference scope
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Portfolio> CreateDerivedPortfolioAsync(this ILUSIDAPI operations, string scope, CreateDerivedTransactionPortfolioRequest portfolio = default(CreateDerivedTransactionPortfolioRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDerivedPortfolioWithHttpMessagesAsync(scope, portfolio, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete portfolio details
            /// </summary>
            /// <remarks>
            /// Deletes the portfolio details for the specified derived transaction
            /// portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date of the change
            /// </param>
            public static DeletedEntityResponse DeleteDerivedPortfolioDetails(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?))
            {
                return operations.DeleteDerivedPortfolioDetailsAsync(scope, code, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete portfolio details
            /// </summary>
            /// <remarks>
            /// Deletes the portfolio details for the specified derived transaction
            /// portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date of the change
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeleteDerivedPortfolioDetailsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDerivedPortfolioDetailsWithHttpMessagesAsync(scope, code, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all of the currently mastered instruments in LUSID
            /// </summary>
            /// <remarks>
            /// Lists all instruments that have been mastered within LUSID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asAt'>
            /// The AsAt time
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            public static ResourceListOfInstrument ListInstruments(this ILUSIDAPI operations, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.ListInstrumentsAsync(asAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all of the currently mastered instruments in LUSID
            /// </summary>
            /// <remarks>
            /// Lists all instruments that have been mastered within LUSID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asAt'>
            /// The AsAt time
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfInstrument> ListInstrumentsAsync(this ILUSIDAPI operations, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstrumentsWithHttpMessagesAsync(asAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upsert instruments
            /// </summary>
            /// <remarks>
            /// Attempt to master one or more instruments in LUSID's instrument master.
            /// Each instrument is keyed by some unique key. This key is unimportant, and
            /// serves only as a method to identify created instruments in the response.
            ///
            /// The response will return both the collection of successfully created
            /// instruments, as well as those that were rejected and why their creation
            /// failed. They will be keyed against the key supplied in the
            /// request.
            ///
            /// It is important to always check the 'Failed' set for any unsuccessful
            /// results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requests'>
            /// The instrument definitions
            /// </param>
            public static UpsertInstrumentsResponse UpsertInstruments(this ILUSIDAPI operations, IDictionary<string, InstrumentDefinition> requests = default(IDictionary<string, InstrumentDefinition>))
            {
                return operations.UpsertInstrumentsAsync(requests).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upsert instruments
            /// </summary>
            /// <remarks>
            /// Attempt to master one or more instruments in LUSID's instrument master.
            /// Each instrument is keyed by some unique key. This key is unimportant, and
            /// serves only as a method to identify created instruments in the response.
            ///
            /// The response will return both the collection of successfully created
            /// instruments, as well as those that were rejected and why their creation
            /// failed. They will be keyed against the key supplied in the
            /// request.
            ///
            /// It is important to always check the 'Failed' set for any unsuccessful
            /// results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requests'>
            /// The instrument definitions
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpsertInstrumentsResponse> UpsertInstrumentsAsync(this ILUSIDAPI operations, IDictionary<string, InstrumentDefinition> requests = default(IDictionary<string, InstrumentDefinition>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertInstrumentsWithHttpMessagesAsync(requests, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get instrument definition
            /// </summary>
            /// <remarks>
            /// Get an individual instrument by the one of its unique instrument
            /// identifiers. Optionally, it is possible to decorate each instrument with
            /// specified property data.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// The type of identifier being supplied. Possible values include:
            /// 'Undefined', 'LusidInstrumentId', 'ReutersAssetId', 'CINS', 'Isin',
            /// 'Sedol', 'Cusip', 'Ticker', 'ClientInternal', 'Figi', 'CompositeFigi',
            /// 'ShareClassFigi', 'Wertpapier', 'RIC', 'QuotePermId'
            /// </param>
            /// <param name='id'>
            /// The identifier of the requested instrument
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the query
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the query
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Optional. Keys of the properties to be decorated on to the instrument
            /// </param>
            public static Instrument GetInstrument(this ILUSIDAPI operations, string type, string id, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> instrumentPropertyKeys = default(IList<string>))
            {
                return operations.GetInstrumentAsync(type, id, effectiveAt, asAt, instrumentPropertyKeys).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get instrument definition
            /// </summary>
            /// <remarks>
            /// Get an individual instrument by the one of its unique instrument
            /// identifiers. Optionally, it is possible to decorate each instrument with
            /// specified property data.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// The type of identifier being supplied. Possible values include:
            /// 'Undefined', 'LusidInstrumentId', 'ReutersAssetId', 'CINS', 'Isin',
            /// 'Sedol', 'Cusip', 'Ticker', 'ClientInternal', 'Figi', 'CompositeFigi',
            /// 'ShareClassFigi', 'Wertpapier', 'RIC', 'QuotePermId'
            /// </param>
            /// <param name='id'>
            /// The identifier of the requested instrument
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the query
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the query
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Optional. Keys of the properties to be decorated on to the instrument
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Instrument> GetInstrumentAsync(this ILUSIDAPI operations, string type, string id, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> instrumentPropertyKeys = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstrumentWithHttpMessagesAsync(type, id, effectiveAt, asAt, instrumentPropertyKeys, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update instrument identifier
            /// </summary>
            /// <remarks>
            /// Adds, updates, or removes an identifier on an instrument
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// The type of identifier being supplied. Possible values include:
            /// 'Undefined', 'LusidInstrumentId', 'ReutersAssetId', 'CINS', 'Isin',
            /// 'Sedol', 'Cusip', 'Ticker', 'ClientInternal', 'Figi', 'CompositeFigi',
            /// 'ShareClassFigi', 'Wertpapier', 'RIC', 'QuotePermId'
            /// </param>
            /// <param name='id'>
            /// The instrument identifier
            /// </param>
            /// <param name='request'>
            /// The identifier to add, update, or remove
            /// </param>
            public static Instrument UpdateInstrumentIdentifier(this ILUSIDAPI operations, string type, string id, UpdateInstrumentIdentifierRequest request = default(UpdateInstrumentIdentifierRequest))
            {
                return operations.UpdateInstrumentIdentifierAsync(type, id, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update instrument identifier
            /// </summary>
            /// <remarks>
            /// Adds, updates, or removes an identifier on an instrument
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// The type of identifier being supplied. Possible values include:
            /// 'Undefined', 'LusidInstrumentId', 'ReutersAssetId', 'CINS', 'Isin',
            /// 'Sedol', 'Cusip', 'Ticker', 'ClientInternal', 'Figi', 'CompositeFigi',
            /// 'ShareClassFigi', 'Wertpapier', 'RIC', 'QuotePermId'
            /// </param>
            /// <param name='id'>
            /// The instrument identifier
            /// </param>
            /// <param name='request'>
            /// The identifier to add, update, or remove
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Instrument> UpdateInstrumentIdentifierAsync(this ILUSIDAPI operations, string type, string id, UpdateInstrumentIdentifierRequest request = default(UpdateInstrumentIdentifierRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateInstrumentIdentifierWithHttpMessagesAsync(type, id, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete instrument
            /// </summary>
            /// <remarks>
            /// Attempt to delete one or more "client" instruments.
            ///
            /// The response will include those instruments that could not be deleted (as
            /// well as any available details).
            ///
            /// It is important to always check the 'Failed' set for any unsuccessful
            /// results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// The type of identifier being supplied. Possible values include:
            /// 'Undefined', 'LusidInstrumentId', 'ReutersAssetId', 'CINS', 'Isin',
            /// 'Sedol', 'Cusip', 'Ticker', 'ClientInternal', 'Figi', 'CompositeFigi',
            /// 'ShareClassFigi', 'Wertpapier', 'RIC', 'QuotePermId'
            /// </param>
            /// <param name='id'>
            /// The instrument identifier
            /// </param>
            public static DeleteInstrumentResponse DeleteInstrument(this ILUSIDAPI operations, string type, string id)
            {
                return operations.DeleteInstrumentAsync(type, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete instrument
            /// </summary>
            /// <remarks>
            /// Attempt to delete one or more "client" instruments.
            ///
            /// The response will include those instruments that could not be deleted (as
            /// well as any available details).
            ///
            /// It is important to always check the 'Failed' set for any unsuccessful
            /// results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// The type of identifier being supplied. Possible values include:
            /// 'Undefined', 'LusidInstrumentId', 'ReutersAssetId', 'CINS', 'Isin',
            /// 'Sedol', 'Cusip', 'Ticker', 'ClientInternal', 'Figi', 'CompositeFigi',
            /// 'ShareClassFigi', 'Wertpapier', 'RIC', 'QuotePermId'
            /// </param>
            /// <param name='id'>
            /// The instrument identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteInstrumentResponse> DeleteInstrumentAsync(this ILUSIDAPI operations, string type, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteInstrumentWithHttpMessagesAsync(type, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search instrument definition
            /// </summary>
            /// <remarks>
            /// Get a collection of instruments by a set of identifiers. Optionally, it is
            /// possible to decorate each instrument with specified property data.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aliases'>
            /// The list of market aliases (e.g ISIN, Ticker) to find instruments by.
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the query
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the query
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Optional. Keys of the properties to be decorated on to the instrument
            /// </param>
            public static ResourceListOfInstrument FindInstruments(this ILUSIDAPI operations, IList<Property> aliases = default(IList<Property>), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> instrumentPropertyKeys = default(IList<string>))
            {
                return operations.FindInstrumentsAsync(aliases, effectiveAt, asAt, instrumentPropertyKeys).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search instrument definition
            /// </summary>
            /// <remarks>
            /// Get a collection of instruments by a set of identifiers. Optionally, it is
            /// possible to decorate each instrument with specified property data.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aliases'>
            /// The list of market aliases (e.g ISIN, Ticker) to find instruments by.
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the query
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the query
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Optional. Keys of the properties to be decorated on to the instrument
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfInstrument> FindInstrumentsAsync(this ILUSIDAPI operations, IList<Property> aliases = default(IList<Property>), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> instrumentPropertyKeys = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindInstrumentsWithHttpMessagesAsync(aliases, effectiveAt, asAt, instrumentPropertyKeys, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get instrument definition
            /// </summary>
            /// <remarks>
            /// Get a collection of instruments by a set of identifiers. Optionally, it is
            /// possible to decorate each instrument with specified property data.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codeType'>
            /// the type of codes being specified. Possible values include: 'Undefined',
            /// 'LusidInstrumentId', 'ReutersAssetId', 'CINS', 'Isin', 'Sedol', 'Cusip',
            /// 'Ticker', 'ClientInternal', 'Figi', 'CompositeFigi', 'ShareClassFigi',
            /// 'Wertpapier', 'RIC', 'QuotePermId'
            /// </param>
            /// <param name='codes'>
            /// The identifiers of the instruments to get
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the request
            /// </param>
            /// <param name='asAt'>
            /// Optional. The as at date of the request
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Optional. Keys of the properties to be decorated on to the instrument
            /// </param>
            public static GetInstrumentsResponse GetInstruments(this ILUSIDAPI operations, string codeType = default(string), IList<string> codes = default(IList<string>), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> instrumentPropertyKeys = default(IList<string>))
            {
                return operations.GetInstrumentsAsync(codeType, codes, effectiveAt, asAt, instrumentPropertyKeys).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get instrument definition
            /// </summary>
            /// <remarks>
            /// Get a collection of instruments by a set of identifiers. Optionally, it is
            /// possible to decorate each instrument with specified property data.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codeType'>
            /// the type of codes being specified. Possible values include: 'Undefined',
            /// 'LusidInstrumentId', 'ReutersAssetId', 'CINS', 'Isin', 'Sedol', 'Cusip',
            /// 'Ticker', 'ClientInternal', 'Figi', 'CompositeFigi', 'ShareClassFigi',
            /// 'Wertpapier', 'RIC', 'QuotePermId'
            /// </param>
            /// <param name='codes'>
            /// The identifiers of the instruments to get
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the request
            /// </param>
            /// <param name='asAt'>
            /// Optional. The as at date of the request
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Optional. Keys of the properties to be decorated on to the instrument
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetInstrumentsResponse> GetInstrumentsAsync(this ILUSIDAPI operations, string codeType = default(string), IList<string> codes = default(IList<string>), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> instrumentPropertyKeys = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstrumentsWithHttpMessagesAsync(codeType, codes, effectiveAt, asAt, instrumentPropertyKeys, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Find externally mastered instruments
            /// </summary>
            /// <remarks>
            /// Search for a set of instruments from an external instrument mastering
            /// service
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codeType'>
            /// The type of codes to search for. Possible values include: 'Undefined',
            /// 'LusidInstrumentId', 'ReutersAssetId', 'CINS', 'Isin', 'Sedol', 'Cusip',
            /// 'Ticker', 'ClientInternal', 'Figi', 'CompositeFigi', 'ShareClassFigi',
            /// 'Wertpapier', 'RIC', 'QuotePermId'
            /// </param>
            /// <param name='codes'>
            /// The collection of instruments to search for
            /// </param>
            public static MatchInstrumentsResponse MatchInstruments(this ILUSIDAPI operations, string codeType = default(string), IList<string> codes = default(IList<string>))
            {
                return operations.MatchInstrumentsAsync(codeType, codes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find externally mastered instruments
            /// </summary>
            /// <remarks>
            /// Search for a set of instruments from an external instrument mastering
            /// service
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codeType'>
            /// The type of codes to search for. Possible values include: 'Undefined',
            /// 'LusidInstrumentId', 'ReutersAssetId', 'CINS', 'Isin', 'Sedol', 'Cusip',
            /// 'Ticker', 'ClientInternal', 'Figi', 'CompositeFigi', 'ShareClassFigi',
            /// 'Wertpapier', 'RIC', 'QuotePermId'
            /// </param>
            /// <param name='codes'>
            /// The collection of instruments to search for
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MatchInstrumentsResponse> MatchInstrumentsAsync(this ILUSIDAPI operations, string codeType = default(string), IList<string> codes = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MatchInstrumentsWithHttpMessagesAsync(codeType, codes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upsert instrument properties
            /// </summary>
            /// <remarks>
            /// Attempt to upsert property data for one or more instruments, properties,
            /// and effective dates.
            ///
            /// The response will include the details of any failures that occurred during
            /// data storage.
            ///
            /// It is important to always check the 'Failed' collection for any
            /// unsuccessful results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instrumentProperties'>
            /// The instrument property data
            /// </param>
            public static UpsertInstrumentPropertiesResponse UpsertInstrumentsProperties(this ILUSIDAPI operations, IList<InstrumentProperty> instrumentProperties = default(IList<InstrumentProperty>))
            {
                return operations.UpsertInstrumentsPropertiesAsync(instrumentProperties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upsert instrument properties
            /// </summary>
            /// <remarks>
            /// Attempt to upsert property data for one or more instruments, properties,
            /// and effective dates.
            ///
            /// The response will include the details of any failures that occurred during
            /// data storage.
            ///
            /// It is important to always check the 'Failed' collection for any
            /// unsuccessful results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instrumentProperties'>
            /// The instrument property data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpsertInstrumentPropertiesResponse> UpsertInstrumentsPropertiesAsync(this ILUSIDAPI operations, IList<InstrumentProperty> instrumentProperties = default(IList<InstrumentProperty>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertInstrumentsPropertiesWithHttpMessagesAsync(instrumentProperties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get allowable instrument identifiers
            /// </summary>
            /// <remarks>
            /// Gets the set of identifiers that have been configured as unique identifiers
            /// for instruments.
            ///
            /// Only CodeTypes returned from this end point can be used as identifiers for
            /// instruments.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ResourceListOfCodeType GetInstrumentIdentifiers(this ILUSIDAPI operations)
            {
                return operations.GetInstrumentIdentifiersAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get allowable instrument identifiers
            /// </summary>
            /// <remarks>
            /// Gets the set of identifiers that have been configured as unique identifiers
            /// for instruments.
            ///
            /// Only CodeTypes returned from this end point can be used as identifiers for
            /// instruments.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfCodeType> GetInstrumentIdentifiersAsync(this ILUSIDAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstrumentIdentifiersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get SAML Identity Provider
            /// </summary>
            /// <remarks>
            /// Get the unique identifier for the SAML 2.0 Identity Provider to be used for
            /// domain.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// The domain that the user will be logging in to
            /// </param>
            public static string GetSamlIdentityProviderId(this ILUSIDAPI operations, string domain)
            {
                return operations.GetSamlIdentityProviderIdAsync(domain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get SAML Identity Provider
            /// </summary>
            /// <remarks>
            /// Get the unique identifier for the SAML 2.0 Identity Provider to be used for
            /// domain.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// The domain that the user will be logging in to
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetSamlIdentityProviderIdAsync(this ILUSIDAPI operations, string domain, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSamlIdentityProviderIdWithHttpMessagesAsync(domain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Excel download url
            /// </summary>
            /// <remarks>
            /// Request an authorised url for an Excel client version
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// The requested version of the Excel plugin
            /// </param>
            public static string GetExcelDownloadUrl(this ILUSIDAPI operations, string version = default(string))
            {
                return operations.GetExcelDownloadUrlAsync(version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Excel download url
            /// </summary>
            /// <remarks>
            /// Request an authorised url for an Excel client version
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// The requested version of the Excel plugin
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetExcelDownloadUrlAsync(this ILUSIDAPI operations, string version = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExcelDownloadUrlWithHttpMessagesAsync(version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Download Excel Addin
            /// </summary>
            /// <remarks>
            /// Download the LUSID Excel Addin for Microsoft Excel. Not providing a
            /// specific value will return the latest version being returned
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// The requested version of the Excel plugin
            /// </param>
            public static FileResponse GetExcelAddin(this ILUSIDAPI operations, string version = default(string))
            {
                return operations.GetExcelAddinAsync(version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Download Excel Addin
            /// </summary>
            /// <remarks>
            /// Download the LUSID Excel Addin for Microsoft Excel. Not providing a
            /// specific value will return the latest version being returned
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// The requested version of the Excel plugin
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileResponse> GetExcelAddinAsync(this ILUSIDAPI operations, string version = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExcelAddinWithHttpMessagesAsync(version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get LUSID versions
            /// </summary>
            /// <remarks>
            /// Get the semantic versions associated with LUSID and its ecosystem
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static VersionSummaryDto GetLusidVersions(this ILUSIDAPI operations)
            {
                return operations.GetLusidVersionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get LUSID versions
            /// </summary>
            /// <remarks>
            /// Get the semantic versions associated with LUSID and its ecosystem
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VersionSummaryDto> GetLusidVersionsAsync(this ILUSIDAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLusidVersionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get personalisation
            /// </summary>
            /// <remarks>
            /// Get a personalisation, recursing to get any referenced if required.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pattern'>
            /// The search pattern or specific key
            /// </param>
            /// <param name='scope'>
            /// Optional. The scope level to request for. Possible values include: 'User',
            /// 'Group', 'Default', 'All'
            /// </param>
            /// <param name='recursive'>
            /// Optional. Whether to recurse into dereference recursive settings
            /// </param>
            /// <param name='wildcards'>
            /// Optional. Whether to apply wildcards to the provided pattern and pull back
            /// any matching
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            public static ResourceListOfPersonalisation GetPersonalisations(this ILUSIDAPI operations, string pattern = default(string), string scope = default(string), bool? recursive = false, bool? wildcards = false, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetPersonalisationsAsync(pattern, scope, recursive, wildcards, sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get personalisation
            /// </summary>
            /// <remarks>
            /// Get a personalisation, recursing to get any referenced if required.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pattern'>
            /// The search pattern or specific key
            /// </param>
            /// <param name='scope'>
            /// Optional. The scope level to request for. Possible values include: 'User',
            /// 'Group', 'Default', 'All'
            /// </param>
            /// <param name='recursive'>
            /// Optional. Whether to recurse into dereference recursive settings
            /// </param>
            /// <param name='wildcards'>
            /// Optional. Whether to apply wildcards to the provided pattern and pull back
            /// any matching
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfPersonalisation> GetPersonalisationsAsync(this ILUSIDAPI operations, string pattern = default(string), string scope = default(string), bool? recursive = false, bool? wildcards = false, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPersonalisationsWithHttpMessagesAsync(pattern, scope, recursive, wildcards, sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upsert personalisations
            /// </summary>
            /// <remarks>
            /// Upsert one or more personalisations
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personalisations'>
            /// The set of personalisations to persist
            /// </param>
            public static UpsertPersonalisationResponse UpsertPersonalisations(this ILUSIDAPI operations, IList<Personalisation> personalisations = default(IList<Personalisation>))
            {
                return operations.UpsertPersonalisationsAsync(personalisations).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upsert personalisations
            /// </summary>
            /// <remarks>
            /// Upsert one or more personalisations
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personalisations'>
            /// The set of personalisations to persist
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpsertPersonalisationResponse> UpsertPersonalisationsAsync(this ILUSIDAPI operations, IList<Personalisation> personalisations = default(IList<Personalisation>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertPersonalisationsWithHttpMessagesAsync(personalisations, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a personalisation
            /// </summary>
            /// <remarks>
            /// Delete a personalisation at a specific scope (or use scope ALL to purge the
            /// setting entirely)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The key of the setting to be deleted
            /// </param>
            /// <param name='scope'>
            /// The scope to delete at (use ALL to purge the setting entirely). Possible
            /// values include: 'User', 'Group', 'Default', 'All'
            /// </param>
            /// <param name='group'>
            /// Optional. If deleting a setting at group level, specify the group here
            /// </param>
            public static DeletedEntityResponse DeletePersonalisation(this ILUSIDAPI operations, string key = default(string), string scope = default(string), string group = default(string))
            {
                return operations.DeletePersonalisationAsync(key, scope, group).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a personalisation
            /// </summary>
            /// <remarks>
            /// Delete a personalisation at a specific scope (or use scope ALL to purge the
            /// setting entirely)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The key of the setting to be deleted
            /// </param>
            /// <param name='scope'>
            /// The scope to delete at (use ALL to purge the setting entirely). Possible
            /// values include: 'User', 'Group', 'Default', 'All'
            /// </param>
            /// <param name='group'>
            /// Optional. If deleting a setting at group level, specify the group here
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePersonalisationAsync(this ILUSIDAPI operations, string key = default(string), string scope = default(string), string group = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePersonalisationWithHttpMessagesAsync(key, scope, group, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List groups in scope
            /// </summary>
            /// <remarks>
            /// Lists all portfolio groups in a specified scope
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            public static ResourceListOfPortfolioGroup ListPortfolioGroups(this ILUSIDAPI operations, string scope, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.ListPortfolioGroupsAsync(scope, asAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List groups in scope
            /// </summary>
            /// <remarks>
            /// Lists all portfolio groups in a specified scope
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfPortfolioGroup> ListPortfolioGroupsAsync(this ILUSIDAPI operations, string scope, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPortfolioGroupsWithHttpMessagesAsync(scope, asAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create group
            /// </summary>
            /// <remarks>
            /// Create a new portfolio group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope into which the portfolio group will be created
            /// </param>
            /// <param name='request'>
            /// The definition of the new portfolio group
            /// </param>
            public static PortfolioGroup CreatePortfolioGroup(this ILUSIDAPI operations, string scope, CreatePortfolioGroupRequest request = default(CreatePortfolioGroupRequest))
            {
                return operations.CreatePortfolioGroupAsync(scope, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create group
            /// </summary>
            /// <remarks>
            /// Create a new portfolio group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope into which the portfolio group will be created
            /// </param>
            /// <param name='request'>
            /// The definition of the new portfolio group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioGroup> CreatePortfolioGroupAsync(this ILUSIDAPI operations, string scope, CreatePortfolioGroupRequest request = default(CreatePortfolioGroupRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePortfolioGroupWithHttpMessagesAsync(scope, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get portfolio group
            /// </summary>
            /// <remarks>
            /// Get the definition of the specified portfolio group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            public static PortfolioGroup GetPortfolioGroup(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.GetPortfolioGroupAsync(scope, code, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get portfolio group
            /// </summary>
            /// <remarks>
            /// Get the definition of the specified portfolio group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioGroup> GetPortfolioGroupAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortfolioGroupWithHttpMessagesAsync(scope, code, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update group
            /// </summary>
            /// <remarks>
            /// Update the definition of the specified existing portfolio group.
            ///
            /// Not all elements within a portfolio group definition are modifiable after
            /// creation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group
            /// </param>
            /// <param name='request'>
            /// The updated definition of the portfolio group
            /// </param>
            public static PortfolioGroup UpdatePortfolioGroup(this ILUSIDAPI operations, string scope, string code, UpdatePortfolioGroupRequest request = default(UpdatePortfolioGroupRequest))
            {
                return operations.UpdatePortfolioGroupAsync(scope, code, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update group
            /// </summary>
            /// <remarks>
            /// Update the definition of the specified existing portfolio group.
            ///
            /// Not all elements within a portfolio group definition are modifiable after
            /// creation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group
            /// </param>
            /// <param name='request'>
            /// The updated definition of the portfolio group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioGroup> UpdatePortfolioGroupAsync(this ILUSIDAPI operations, string scope, string code, UpdatePortfolioGroupRequest request = default(UpdatePortfolioGroupRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePortfolioGroupWithHttpMessagesAsync(scope, code, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete group
            /// </summary>
            /// <remarks>
            /// Deletes the definition of the specified portfolio group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group
            /// </param>
            public static DeletedEntityResponse DeletePortfolioGroup(this ILUSIDAPI operations, string scope, string code)
            {
                return operations.DeletePortfolioGroupAsync(scope, code).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete group
            /// </summary>
            /// <remarks>
            /// Deletes the definition of the specified portfolio group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePortfolioGroupAsync(this ILUSIDAPI operations, string scope, string code, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePortfolioGroupWithHttpMessagesAsync(scope, code, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Aggregate data in a portfolio group
            /// </summary>
            /// <remarks>
            /// Aggregate data sourced from the specified portfolio group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group
            /// </param>
            /// <param name='request'>
            /// The request specifying the parameters of the aggregation
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            public static ListAggregationResponse GetAggregationByGroup(this ILUSIDAPI operations, string scope, string code, AggregationRequest request = default(AggregationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetAggregationByGroupAsync(scope, code, request, sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Aggregate data in a portfolio group
            /// </summary>
            /// <remarks>
            /// Aggregate data sourced from the specified portfolio group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group
            /// </param>
            /// <param name='request'>
            /// The request specifying the parameters of the aggregation
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListAggregationResponse> GetAggregationByGroupAsync(this ILUSIDAPI operations, string scope, string code, AggregationRequest request = default(AggregationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAggregationByGroupWithHttpMessagesAsync(scope, code, request, sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Aggregate data in a portfolio group, as nested
            /// </summary>
            /// <remarks>
            /// Obsolete - Aggregate data sourced from the specified portfolio group into a
            /// nested structure. Data is nested following the group-by specifications.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group
            /// </param>
            /// <param name='request'>
            /// The request specifying the parameters of the aggregation
            /// </param>
            public static NestedAggregationResponse GetNestedAggregationByGroup(this ILUSIDAPI operations, string scope, string code, AggregationRequest request = default(AggregationRequest))
            {
                return operations.GetNestedAggregationByGroupAsync(scope, code, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Aggregate data in a portfolio group, as nested
            /// </summary>
            /// <remarks>
            /// Obsolete - Aggregate data sourced from the specified portfolio group into a
            /// nested structure. Data is nested following the group-by specifications.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group
            /// </param>
            /// <param name='request'>
            /// The request specifying the parameters of the aggregation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NestedAggregationResponse> GetNestedAggregationByGroupAsync(this ILUSIDAPI operations, string scope, string code, AggregationRequest request = default(AggregationRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNestedAggregationByGroupWithHttpMessagesAsync(scope, code, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get commands
            /// </summary>
            /// <remarks>
            /// Gets all commands that modified a specific portfolio group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group
            /// </param>
            /// <param name='fromAsAt'>
            /// Optional. Filters commands by those that were processed at or after this
            /// date and time
            /// </param>
            /// <param name='toAsAt'>
            /// Optional. Filters commands by those that were processed at or before this
            /// date and time
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            public static ResourceListOfProcessedCommand GetPortfolioGroupCommands(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromAsAt = default(System.DateTimeOffset?), System.DateTimeOffset? toAsAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.GetPortfolioGroupCommandsAsync(scope, code, fromAsAt, toAsAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get commands
            /// </summary>
            /// <remarks>
            /// Gets all commands that modified a specific portfolio group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group
            /// </param>
            /// <param name='fromAsAt'>
            /// Optional. Filters commands by those that were processed at or after this
            /// date and time
            /// </param>
            /// <param name='toAsAt'>
            /// Optional. Filters commands by those that were processed at or before this
            /// date and time
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfProcessedCommand> GetPortfolioGroupCommandsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromAsAt = default(System.DateTimeOffset?), System.DateTimeOffset? toAsAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortfolioGroupCommandsWithHttpMessagesAsync(scope, code, fromAsAt, toAsAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a full expansion of a portfolio group
            /// </summary>
            /// <remarks>
            /// Lists all portfolios in a group, and all sub groups. Portfolios are
            /// decorated with their properties.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the data
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='propertyFilter'>
            /// Optional. The restricted set of properties that should be returned
            /// </param>
            public static ExpandedGroup GetPortfolioGroupExpansion(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyFilter = default(IList<string>))
            {
                return operations.GetPortfolioGroupExpansionAsync(scope, code, effectiveAt, asAt, propertyFilter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a full expansion of a portfolio group
            /// </summary>
            /// <remarks>
            /// Lists all portfolios in a group, and all sub groups. Portfolios are
            /// decorated with their properties.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the data
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='propertyFilter'>
            /// Optional. The restricted set of properties that should be returned
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExpandedGroup> GetPortfolioGroupExpansionAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyFilter = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortfolioGroupExpansionWithHttpMessagesAsync(scope, code, effectiveAt, asAt, propertyFilter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add portfolio to group
            /// </summary>
            /// <remarks>
            /// Adds a portfolio to a previously defined portfolio group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group to which a portfolio is being added
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group to which a portfolio is being added
            /// </param>
            /// <param name='portfolioId'>
            /// The id of the portfolio
            /// </param>
            public static PortfolioGroup AddPortfolioToGroup(this ILUSIDAPI operations, string scope, string code, ResourceId portfolioId = default(ResourceId))
            {
                return operations.AddPortfolioToGroupAsync(scope, code, portfolioId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add portfolio to group
            /// </summary>
            /// <remarks>
            /// Adds a portfolio to a previously defined portfolio group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group to which a portfolio is being added
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group to which a portfolio is being added
            /// </param>
            /// <param name='portfolioId'>
            /// The id of the portfolio
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioGroup> AddPortfolioToGroupAsync(this ILUSIDAPI operations, string scope, string code, ResourceId portfolioId = default(ResourceId), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPortfolioToGroupWithHttpMessagesAsync(scope, code, portfolioId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove portfolio from group
            /// </summary>
            /// <remarks>
            /// Removes a portfolio from a portfolio group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group
            /// </param>
            /// <param name='portfolioScope'>
            /// The scope of the portfolio being removed
            /// </param>
            /// <param name='portfolioCode'>
            /// The code of the portfolio being removed
            /// </param>
            public static PortfolioGroup DeletePortfolioFromGroup(this ILUSIDAPI operations, string scope, string code, string portfolioScope, string portfolioCode)
            {
                return operations.DeletePortfolioFromGroupAsync(scope, code, portfolioScope, portfolioCode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove portfolio from group
            /// </summary>
            /// <remarks>
            /// Removes a portfolio from a portfolio group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group
            /// </param>
            /// <param name='portfolioScope'>
            /// The scope of the portfolio being removed
            /// </param>
            /// <param name='portfolioCode'>
            /// The code of the portfolio being removed
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioGroup> DeletePortfolioFromGroupAsync(this ILUSIDAPI operations, string scope, string code, string portfolioScope, string portfolioCode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePortfolioFromGroupWithHttpMessagesAsync(scope, code, portfolioScope, portfolioCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add group to group
            /// </summary>
            /// <remarks>
            /// Adds a portfolio group, as a sub-group, to an existing portfolio group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group to which a sub-group is being added
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group to which a sub-group is being added
            /// </param>
            /// <param name='portfolioGroupId'>
            /// The id of the portfolio group being added as a sub-group
            /// </param>
            public static PortfolioGroup AddSubGroupToGroup(this ILUSIDAPI operations, string scope, string code, ResourceId portfolioGroupId = default(ResourceId))
            {
                return operations.AddSubGroupToGroupAsync(scope, code, portfolioGroupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add group to group
            /// </summary>
            /// <remarks>
            /// Adds a portfolio group, as a sub-group, to an existing portfolio group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group to which a sub-group is being added
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group to which a sub-group is being added
            /// </param>
            /// <param name='portfolioGroupId'>
            /// The id of the portfolio group being added as a sub-group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioGroup> AddSubGroupToGroupAsync(this ILUSIDAPI operations, string scope, string code, ResourceId portfolioGroupId = default(ResourceId), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddSubGroupToGroupWithHttpMessagesAsync(scope, code, portfolioGroupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove group from group
            /// </summary>
            /// <remarks>
            /// Remove a portfolio group (sub-group) from a parent portfolio group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group
            /// </param>
            /// <param name='subgroupScope'>
            /// The scope of the sub-group being removed
            /// </param>
            /// <param name='subgroupCode'>
            /// The code of the sub-group being removed
            /// </param>
            public static PortfolioGroup DeleteSubGroupFromGroup(this ILUSIDAPI operations, string scope, string code, string subgroupScope, string subgroupCode)
            {
                return operations.DeleteSubGroupFromGroupAsync(scope, code, subgroupScope, subgroupCode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove group from group
            /// </summary>
            /// <remarks>
            /// Remove a portfolio group (sub-group) from a parent portfolio group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio group
            /// </param>
            /// <param name='subgroupScope'>
            /// The scope of the sub-group being removed
            /// </param>
            /// <param name='subgroupCode'>
            /// The code of the sub-group being removed
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioGroup> DeleteSubGroupFromGroupAsync(this ILUSIDAPI operations, string scope, string code, string subgroupScope, string subgroupCode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSubGroupFromGroupWithHttpMessagesAsync(scope, code, subgroupScope, subgroupCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List portfolio scopes
            /// </summary>
            /// <remarks>
            /// Lists all scopes that are either currently or have previously had
            /// portfolios in them
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Filter to be applied to the list of scopes
            /// </param>
            public static ResourceListOfScope ListPortfolioScopes(this ILUSIDAPI operations, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.ListPortfolioScopesAsync(sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List portfolio scopes
            /// </summary>
            /// <remarks>
            /// Lists all scopes that are either currently or have previously had
            /// portfolios in them
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Filter to be applied to the list of scopes
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfScope> ListPortfolioScopesAsync(this ILUSIDAPI operations, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPortfolioScopesWithHttpMessagesAsync(sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List portfolios
            /// </summary>
            /// <remarks>
            /// List all the portfolios in the specified scope
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the data
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            public static ResourceListOfPortfolio ListPortfolios(this ILUSIDAPI operations, string scope, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.ListPortfoliosAsync(scope, effectiveAt, asAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List portfolios
            /// </summary>
            /// <remarks>
            /// List all the portfolios in the specified scope
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the data
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfPortfolio> ListPortfoliosAsync(this ILUSIDAPI operations, string scope, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPortfoliosWithHttpMessagesAsync(scope, effectiveAt, asAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get portfolio definition
            /// </summary>
            /// <remarks>
            /// Retrieves the basic set of information about a portfolio using the
            /// specified scope and code.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the data
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            public static Portfolio GetPortfolio(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.GetPortfolioAsync(scope, code, effectiveAt, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get portfolio definition
            /// </summary>
            /// <remarks>
            /// Retrieves the basic set of information about a portfolio using the
            /// specified scope and code.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the data
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Portfolio> GetPortfolioAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortfolioWithHttpMessagesAsync(scope, code, effectiveAt, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update portfolio definition
            /// </summary>
            /// <remarks>
            /// Update the definition of a specific portfolio. Note, some parts of a
            /// portfolio definition are not available for modification after the initial
            /// creation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='request'>
            /// The updated portfolio definition
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date for the change
            /// </param>
            public static Portfolio UpdatePortfolio(this ILUSIDAPI operations, string scope, string code, UpdatePortfolioRequest request = default(UpdatePortfolioRequest), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?))
            {
                return operations.UpdatePortfolioAsync(scope, code, request, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update portfolio definition
            /// </summary>
            /// <remarks>
            /// Update the definition of a specific portfolio. Note, some parts of a
            /// portfolio definition are not available for modification after the initial
            /// creation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='request'>
            /// The updated portfolio definition
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date for the change
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Portfolio> UpdatePortfolioAsync(this ILUSIDAPI operations, string scope, string code, UpdatePortfolioRequest request = default(UpdatePortfolioRequest), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePortfolioWithHttpMessagesAsync(scope, code, request, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete portfolio
            /// </summary>
            /// <remarks>
            /// Delete a portfolio at the specified effectiveAt
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the deletion
            /// </param>
            public static DeletedEntityResponse DeletePortfolio(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?))
            {
                return operations.DeletePortfolioAsync(scope, code, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete portfolio
            /// </summary>
            /// <remarks>
            /// Delete a portfolio at the specified effectiveAt
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the deletion
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePortfolioAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePortfolioWithHttpMessagesAsync(scope, code, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Aggregate data in a portfolio
            /// </summary>
            /// <remarks>
            /// Aggregate data sourced from the specified portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='request'>
            /// The request specifying the parameters of the aggregation
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            public static ListAggregationResponse GetAggregationByPortfolio(this ILUSIDAPI operations, string scope, string code, AggregationRequest request = default(AggregationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetAggregationByPortfolioAsync(scope, code, request, sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Aggregate data in a portfolio
            /// </summary>
            /// <remarks>
            /// Aggregate data sourced from the specified portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='request'>
            /// The request specifying the parameters of the aggregation
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListAggregationResponse> GetAggregationByPortfolioAsync(this ILUSIDAPI operations, string scope, string code, AggregationRequest request = default(AggregationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAggregationByPortfolioWithHttpMessagesAsync(scope, code, request, sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get commands
            /// </summary>
            /// <remarks>
            /// Gets all commands that modified a specific portfolio, including any input
            /// transactions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='fromAsAt'>
            /// Optional. Filters commands by those that were processed at or after this
            /// date and time
            /// </param>
            /// <param name='toAsAt'>
            /// Optional. Filters commands by those that were processed at or before this
            /// date and time
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            public static ResourceListOfProcessedCommand GetPortfolioCommands(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromAsAt = default(System.DateTimeOffset?), System.DateTimeOffset? toAsAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.GetPortfolioCommandsAsync(scope, code, fromAsAt, toAsAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get commands
            /// </summary>
            /// <remarks>
            /// Gets all commands that modified a specific portfolio, including any input
            /// transactions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='fromAsAt'>
            /// Optional. Filters commands by those that were processed at or after this
            /// date and time
            /// </param>
            /// <param name='toAsAt'>
            /// Optional. Filters commands by those that were processed at or before this
            /// date and time
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfProcessedCommand> GetPortfolioCommandsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromAsAt = default(System.DateTimeOffset?), System.DateTimeOffset? toAsAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortfolioCommandsWithHttpMessagesAsync(scope, code, fromAsAt, toAsAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get portfolio properties
            /// </summary>
            /// <remarks>
            /// Get the properties of a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the data
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            public static PortfolioProperties GetPortfolioProperties(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetPortfolioPropertiesAsync(scope, code, effectiveAt, asAt, sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get portfolio properties
            /// </summary>
            /// <remarks>
            /// Get the properties of a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the data
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioProperties> GetPortfolioPropertiesAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortfolioPropertiesWithHttpMessagesAsync(scope, code, effectiveAt, asAt, sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upsert properties
            /// </summary>
            /// <remarks>
            /// Upsert one or more property values to a portfolio for the specified
            /// effectiveAt. All properties must be of the domain Portfolio.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='portfolioProperties'>
            /// The property values to be upserted to the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the change
            /// </param>
            public static PortfolioProperties UpsertPortfolioProperties(this ILUSIDAPI operations, string scope, string code, IDictionary<string, PropertyValue> portfolioProperties = default(IDictionary<string, PropertyValue>), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?))
            {
                return operations.UpsertPortfolioPropertiesAsync(scope, code, portfolioProperties, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upsert properties
            /// </summary>
            /// <remarks>
            /// Upsert one or more property values to a portfolio for the specified
            /// effectiveAt. All properties must be of the domain Portfolio.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='portfolioProperties'>
            /// The property values to be upserted to the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the change
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioProperties> UpsertPortfolioPropertiesAsync(this ILUSIDAPI operations, string scope, string code, IDictionary<string, PropertyValue> portfolioProperties = default(IDictionary<string, PropertyValue>), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertPortfolioPropertiesWithHttpMessagesAsync(scope, code, portfolioProperties, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete portfolio properties
            /// </summary>
            /// <remarks>
            /// Delete one, many or all property values from a portfolio for the specified
            /// effectiveAt
            ///
            /// Specifying no effectiveAt will delete all properties
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the deletion
            /// </param>
            /// <param name='portfolioPropertyKeys'>
            /// Optional. The keys of the properties to be deleted. None specified
            /// indicates the intention to delete all properties from the portfolio
            /// </param>
            public static DeletedEntityResponse DeletePortfolioProperties(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), IList<string> portfolioPropertyKeys = default(IList<string>))
            {
                return operations.DeletePortfolioPropertiesAsync(scope, code, effectiveAt, portfolioPropertyKeys).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete portfolio properties
            /// </summary>
            /// <remarks>
            /// Delete one, many or all property values from a portfolio for the specified
            /// effectiveAt
            ///
            /// Specifying no effectiveAt will delete all properties
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the deletion
            /// </param>
            /// <param name='portfolioPropertyKeys'>
            /// Optional. The keys of the properties to be deleted. None specified
            /// indicates the intention to delete all properties from the portfolio
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePortfolioPropertiesAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), IList<string> portfolioPropertyKeys = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePortfolioPropertiesWithHttpMessagesAsync(scope, code, effectiveAt, portfolioPropertyKeys, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reconcile portfolio holdings
            /// </summary>
            /// <remarks>
            /// Reconcile the holdings of two portfolios.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// The specifications of the inputs to the reconciliation
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            public static ResourceListOfReconciliationBreak ReconcileHoldings(this ILUSIDAPI operations, PortfoliosReconciliationRequest request = default(PortfoliosReconciliationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.ReconcileHoldingsAsync(request, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reconcile portfolio holdings
            /// </summary>
            /// <remarks>
            /// Reconcile the holdings of two portfolios.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// The specifications of the inputs to the reconciliation
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfReconciliationBreak> ReconcileHoldingsAsync(this ILUSIDAPI operations, PortfoliosReconciliationRequest request = default(PortfoliosReconciliationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReconcileHoldingsWithHttpMessagesAsync(request, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reconcile valuations performed on one or two sets of holdings using one or
            /// two configuration recipes.
            /// </summary>
            /// <remarks>
            /// Perform valuation of one or two set of holdings using different one or two
            /// configuration recipes. Produce a breakdown of the resulting differences in
            /// valuation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// The specifications of the inputs to the reconciliation
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            public static ResourceListOfReconciliationBreak ReconcileValuation(this ILUSIDAPI operations, ValuationsReconciliationRequest request = default(ValuationsReconciliationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.ReconcileValuationAsync(request, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reconcile valuations performed on one or two sets of holdings using one or
            /// two configuration recipes.
            /// </summary>
            /// <remarks>
            /// Perform valuation of one or two set of holdings using different one or two
            /// configuration recipes. Produce a breakdown of the resulting differences in
            /// valuation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// The specifications of the inputs to the reconciliation
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfReconciliationBreak> ReconcileValuationAsync(this ILUSIDAPI operations, ValuationsReconciliationRequest request = default(ValuationsReconciliationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReconcileValuationWithHttpMessagesAsync(request, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get multiple property definitions
            /// </summary>
            /// <remarks>
            /// Get one or more property definitions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyKeys'>
            /// One or more keys for properties for which the schema should be returned
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            public static ResourceListOfPropertyDefinition GetMultiplePropertyDefinitions(this ILUSIDAPI operations, IList<string> propertyKeys = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.GetMultiplePropertyDefinitionsAsync(propertyKeys, asAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get multiple property definitions
            /// </summary>
            /// <remarks>
            /// Get one or more property definitions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyKeys'>
            /// One or more keys for properties for which the schema should be returned
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfPropertyDefinition> GetMultiplePropertyDefinitionsAsync(this ILUSIDAPI operations, IList<string> propertyKeys = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiplePropertyDefinitionsWithHttpMessagesAsync(propertyKeys, asAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Define a new property
            /// </summary>
            /// <remarks>
            /// Create a new property definition
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definition'>
            /// The definition of the new property
            /// </param>
            public static PropertyDefinition CreatePropertyDefinition(this ILUSIDAPI operations, CreatePropertyDefinitionRequest definition = default(CreatePropertyDefinitionRequest))
            {
                return operations.CreatePropertyDefinitionAsync(definition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Define a new property
            /// </summary>
            /// <remarks>
            /// Create a new property definition
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definition'>
            /// The definition of the new property
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PropertyDefinition> CreatePropertyDefinitionAsync(this ILUSIDAPI operations, CreatePropertyDefinitionRequest definition = default(CreatePropertyDefinitionRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePropertyDefinitionWithHttpMessagesAsync(definition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get property definition
            /// </summary>
            /// <remarks>
            /// Retrieve the definition for the identified property
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// The Property Domain of the requested property. Possible values include:
            /// 'Trade', 'Portfolio', 'Security', 'Holding', 'ReferenceHolding', 'TxnType',
            /// 'Instrument', 'CutDefinition'
            /// </param>
            /// <param name='scope'>
            /// The scope of the requested property
            /// </param>
            /// <param name='code'>
            /// The code of the requested property
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            public static PropertyDefinition GetPropertyDefinition(this ILUSIDAPI operations, string domain, string scope, string code, System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.GetPropertyDefinitionAsync(domain, scope, code, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get property definition
            /// </summary>
            /// <remarks>
            /// Retrieve the definition for the identified property
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// The Property Domain of the requested property. Possible values include:
            /// 'Trade', 'Portfolio', 'Security', 'Holding', 'ReferenceHolding', 'TxnType',
            /// 'Instrument', 'CutDefinition'
            /// </param>
            /// <param name='scope'>
            /// The scope of the requested property
            /// </param>
            /// <param name='code'>
            /// The code of the requested property
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PropertyDefinition> GetPropertyDefinitionAsync(this ILUSIDAPI operations, string domain, string scope, string code, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPropertyDefinitionWithHttpMessagesAsync(domain, scope, code, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the definition of the specified existing property
            /// </summary>
            /// <remarks>
            /// Not all elements within a property definition are modifiable due to the
            /// potential implications for data
            /// already stored against these properties
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// The Property Domain of the property being updated. Possible values include:
            /// 'Trade', 'Portfolio', 'Security', 'Holding', 'ReferenceHolding', 'TxnType',
            /// 'Instrument', 'CutDefinition'
            /// </param>
            /// <param name='scope'>
            /// The scope of the property to be updated
            /// </param>
            /// <param name='code'>
            /// The code of the property to be updated
            /// </param>
            /// <param name='definition'>
            /// The updated definition of the property
            /// </param>
            public static PropertyDefinition UpdatePropertyDefinition(this ILUSIDAPI operations, string domain, string scope, string code, UpdatePropertyDefinitionRequest definition = default(UpdatePropertyDefinitionRequest))
            {
                return operations.UpdatePropertyDefinitionAsync(domain, scope, code, definition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the definition of the specified existing property
            /// </summary>
            /// <remarks>
            /// Not all elements within a property definition are modifiable due to the
            /// potential implications for data
            /// already stored against these properties
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// The Property Domain of the property being updated. Possible values include:
            /// 'Trade', 'Portfolio', 'Security', 'Holding', 'ReferenceHolding', 'TxnType',
            /// 'Instrument', 'CutDefinition'
            /// </param>
            /// <param name='scope'>
            /// The scope of the property to be updated
            /// </param>
            /// <param name='code'>
            /// The code of the property to be updated
            /// </param>
            /// <param name='definition'>
            /// The updated definition of the property
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PropertyDefinition> UpdatePropertyDefinitionAsync(this ILUSIDAPI operations, string domain, string scope, string code, UpdatePropertyDefinitionRequest definition = default(UpdatePropertyDefinitionRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePropertyDefinitionWithHttpMessagesAsync(domain, scope, code, definition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete property definition
            /// </summary>
            /// <remarks>
            /// Delete the definition of the specified property
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// The Property Domain of the property to be deleted. Possible values include:
            /// 'Trade', 'Portfolio', 'Security', 'Holding', 'ReferenceHolding', 'TxnType',
            /// 'Instrument', 'CutDefinition'
            /// </param>
            /// <param name='scope'>
            /// The scope of the property to be deleted
            /// </param>
            /// <param name='code'>
            /// The code of the property to be deleted
            /// </param>
            public static DeletedEntityResponse DeletePropertyDefinition(this ILUSIDAPI operations, string domain, string scope, string code)
            {
                return operations.DeletePropertyDefinitionAsync(domain, scope, code).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete property definition
            /// </summary>
            /// <remarks>
            /// Delete the definition of the specified property
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// The Property Domain of the property to be deleted. Possible values include:
            /// 'Trade', 'Portfolio', 'Security', 'Holding', 'ReferenceHolding', 'TxnType',
            /// 'Instrument', 'CutDefinition'
            /// </param>
            /// <param name='scope'>
            /// The scope of the property to be deleted
            /// </param>
            /// <param name='code'>
            /// The code of the property to be deleted
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePropertyDefinitionAsync(this ILUSIDAPI operations, string domain, string scope, string code, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePropertyDefinitionWithHttpMessagesAsync(domain, scope, code, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add quotes
            /// </summary>
            /// <remarks>
            /// Add quotes effective at the specified time. If a quote is added with the
            /// same id (and is effective at the same time) as an existing quote, then the
            /// more recently added quote will be returned when queried
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the quotes
            /// </param>
            /// <param name='quotes'>
            /// The quotes to add
            /// </param>
            public static UpsertQuotesResponse UpsertQuotes(this ILUSIDAPI operations, string scope, IList<UpsertQuoteRequest> quotes = default(IList<UpsertQuoteRequest>))
            {
                return operations.UpsertQuotesAsync(scope, quotes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add quotes
            /// </summary>
            /// <remarks>
            /// Add quotes effective at the specified time. If a quote is added with the
            /// same id (and is effective at the same time) as an existing quote, then the
            /// more recently added quote will be returned when queried
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the quotes
            /// </param>
            /// <param name='quotes'>
            /// The quotes to add
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpsertQuotesResponse> UpsertQuotesAsync(this ILUSIDAPI operations, string scope, IList<UpsertQuoteRequest> quotes = default(IList<UpsertQuoteRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertQuotesWithHttpMessagesAsync(scope, quotes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a quote
            /// </summary>
            /// <remarks>
            /// Delete the specified quotes. In order for a quote to be deleted the id and
            /// effectiveFrom date must exactly match.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the quote
            /// </param>
            /// <param name='quotes'>
            /// The quotes to delete
            /// </param>
            public static DeleteQuotesResponse DeleteQuote(this ILUSIDAPI operations, string scope, IList<DeleteQuoteRequest> quotes = default(IList<DeleteQuoteRequest>))
            {
                return operations.DeleteQuoteAsync(scope, quotes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a quote
            /// </summary>
            /// <remarks>
            /// Delete the specified quotes. In order for a quote to be deleted the id and
            /// effectiveFrom date must exactly match.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the quote
            /// </param>
            /// <param name='quotes'>
            /// The quotes to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteQuotesResponse> DeleteQuoteAsync(this ILUSIDAPI operations, string scope, IList<DeleteQuoteRequest> quotes = default(IList<DeleteQuoteRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteQuoteWithHttpMessagesAsync(scope, quotes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get quotes
            /// </summary>
            /// <remarks>
            /// Get quotes effective at the specified date/time (if any). An optional
            /// maximum age of quotes can be specified, and is infinite by default.
            /// Quotes which are older than this at the time of the effective date/time
            /// will not be returned.
            /// MaxAge is a duration of time represented in an ISO8601 format, eg.
            /// P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).
            /// The results are paged, and by default the 1st page of results is returned
            /// with a limit of 100 results per page
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the quotes
            /// </param>
            /// <param name='quoteIds'>
            /// The ids of the quotes
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The date/time from which the quotes are effective
            /// </param>
            /// <param name='asAt'>
            /// Optional. The 'AsAt' date/time
            /// </param>
            /// <param name='maxAge'>
            /// Optional. The quote staleness tolerance
            /// </param>
            /// <param name='page'>
            /// Optional. The page of results to return
            /// </param>
            /// <param name='limit'>
            /// Optional. The number of results per page
            /// </param>
            public static GetQuotesResponse GetQuotes(this ILUSIDAPI operations, string scope, IList<QuoteId> quoteIds = default(IList<QuoteId>), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), string maxAge = default(string), int? page = default(int?), int? limit = default(int?))
            {
                return operations.GetQuotesAsync(scope, quoteIds, effectiveAt, asAt, maxAge, page, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get quotes
            /// </summary>
            /// <remarks>
            /// Get quotes effective at the specified date/time (if any). An optional
            /// maximum age of quotes can be specified, and is infinite by default.
            /// Quotes which are older than this at the time of the effective date/time
            /// will not be returned.
            /// MaxAge is a duration of time represented in an ISO8601 format, eg.
            /// P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).
            /// The results are paged, and by default the 1st page of results is returned
            /// with a limit of 100 results per page
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the quotes
            /// </param>
            /// <param name='quoteIds'>
            /// The ids of the quotes
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The date/time from which the quotes are effective
            /// </param>
            /// <param name='asAt'>
            /// Optional. The 'AsAt' date/time
            /// </param>
            /// <param name='maxAge'>
            /// Optional. The quote staleness tolerance
            /// </param>
            /// <param name='page'>
            /// Optional. The page of results to return
            /// </param>
            /// <param name='limit'>
            /// Optional. The number of results per page
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetQuotesResponse> GetQuotesAsync(this ILUSIDAPI operations, string scope, IList<QuoteId> quoteIds = default(IList<QuoteId>), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), string maxAge = default(string), int? page = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQuotesWithHttpMessagesAsync(scope, quoteIds, effectiveAt, asAt, maxAge, page, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create reference portfolio
            /// </summary>
            /// <remarks>
            /// Create a new reference portfolio.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The intended scope of the portfolio
            /// </param>
            /// <param name='referencePortfolio'>
            /// The portfolio creation request object
            /// </param>
            public static Portfolio CreateReferencePortfolio(this ILUSIDAPI operations, string scope, CreateReferencePortfolioRequest referencePortfolio = default(CreateReferencePortfolioRequest))
            {
                return operations.CreateReferencePortfolioAsync(scope, referencePortfolio).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create reference portfolio
            /// </summary>
            /// <remarks>
            /// Create a new reference portfolio.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The intended scope of the portfolio
            /// </param>
            /// <param name='referencePortfolio'>
            /// The portfolio creation request object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Portfolio> CreateReferencePortfolioAsync(this ILUSIDAPI operations, string scope, CreateReferencePortfolioRequest referencePortfolio = default(CreateReferencePortfolioRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateReferencePortfolioWithHttpMessagesAsync(scope, referencePortfolio, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get constituents
            /// </summary>
            /// <remarks>
            /// Get all the constituents in the specified reference portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date of the constituents to retrieve
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many
            /// </param>
            public static GetReferencePortfolioConstituentsResponse GetReferencePortfolioConstituents(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetReferencePortfolioConstituentsAsync(scope, code, effectiveAt, asAt, sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get constituents
            /// </summary>
            /// <remarks>
            /// Get all the constituents in the specified reference portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date of the constituents to retrieve
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetReferencePortfolioConstituentsResponse> GetReferencePortfolioConstituentsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReferencePortfolioConstituentsWithHttpMessagesAsync(scope, code, effectiveAt, asAt, sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add constituents
            /// </summary>
            /// <remarks>
            /// Add constituents to the specified reference portfolio.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='constituents'>
            /// The constituents to upload to the portfolio
            /// </param>
            public static UpsertReferencePortfolioConstituentsResponse UpsertReferencePortfolioConstituents(this ILUSIDAPI operations, string scope, string code, UpsertReferencePortfolioConstituentsRequest constituents = default(UpsertReferencePortfolioConstituentsRequest))
            {
                return operations.UpsertReferencePortfolioConstituentsAsync(scope, code, constituents).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add constituents
            /// </summary>
            /// <remarks>
            /// Add constituents to the specified reference portfolio.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='constituents'>
            /// The constituents to upload to the portfolio
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpsertReferencePortfolioConstituentsResponse> UpsertReferencePortfolioConstituentsAsync(this ILUSIDAPI operations, string scope, string code, UpsertReferencePortfolioConstituentsRequest constituents = default(UpsertReferencePortfolioConstituentsRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertReferencePortfolioConstituentsWithHttpMessagesAsync(scope, code, constituents, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get results
            /// </summary>
            /// <remarks>
            /// Retrieve some previously stored results
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data
            /// </param>
            /// <param name='key'>
            /// The key that identifies the data
            /// </param>
            /// <param name='date'>
            /// The date for which the data was loaded
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            public static Results GetResults(this ILUSIDAPI operations, string scope, string key, System.DateTimeOffset date, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetResultsAsync(scope, key, date, asAt, sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get results
            /// </summary>
            /// <remarks>
            /// Retrieve some previously stored results
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data
            /// </param>
            /// <param name='key'>
            /// The key that identifies the data
            /// </param>
            /// <param name='date'>
            /// The date for which the data was loaded
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Results> GetResultsAsync(this ILUSIDAPI operations, string scope, string key, System.DateTimeOffset date, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetResultsWithHttpMessagesAsync(scope, key, date, asAt, sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upsert results
            /// </summary>
            /// <remarks>
            /// Upsert pre-calculated results against a specified scope/key/date
            /// combination
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data
            /// </param>
            /// <param name='key'>
            /// The key that identifies the data
            /// </param>
            /// <param name='date'>
            /// The date for which the data is relevant
            /// </param>
            /// <param name='request'>
            /// The results to upload
            /// </param>
            public static Results UpsertResults(this ILUSIDAPI operations, string scope, string key, System.DateTimeOffset date, CreateResults request = default(CreateResults))
            {
                return operations.UpsertResultsAsync(scope, key, date, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upsert results
            /// </summary>
            /// <remarks>
            /// Upsert pre-calculated results against a specified scope/key/date
            /// combination
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data
            /// </param>
            /// <param name='key'>
            /// The key that identifies the data
            /// </param>
            /// <param name='date'>
            /// The date for which the data is relevant
            /// </param>
            /// <param name='request'>
            /// The results to upload
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Results> UpsertResultsAsync(this ILUSIDAPI operations, string scope, string key, System.DateTimeOffset date, CreateResults request = default(CreateResults), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertResultsWithHttpMessagesAsync(scope, key, date, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Aggregate using result data
            /// </summary>
            /// <remarks>
            /// Aggregate data from a previously-run Result data set into a flat row of
            /// results
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the Result data set
            /// </param>
            /// <param name='resultsKey'>
            /// The key of the Result data set
            /// </param>
            /// <param name='request'>
            /// The request specifying the parameters of the aggregation
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            public static ListAggregationResponse GetAggregationByResultSet(this ILUSIDAPI operations, string scope, string resultsKey, AggregationRequest request = default(AggregationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetAggregationByResultSetAsync(scope, resultsKey, request, sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Aggregate using result data
            /// </summary>
            /// <remarks>
            /// Aggregate data from a previously-run Result data set into a flat row of
            /// results
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the Result data set
            /// </param>
            /// <param name='resultsKey'>
            /// The key of the Result data set
            /// </param>
            /// <param name='request'>
            /// The request specifying the parameters of the aggregation
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListAggregationResponse> GetAggregationByResultSetAsync(this ILUSIDAPI operations, string scope, string resultsKey, AggregationRequest request = default(AggregationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAggregationByResultSetWithHttpMessagesAsync(scope, resultsKey, request, sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List entities
            /// </summary>
            /// <remarks>
            /// List all available entities for which schema information is available.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ResourceListOfString ListEntities(this ILUSIDAPI operations)
            {
                return operations.ListEntitiesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List entities
            /// </summary>
            /// <remarks>
            /// List all available entities for which schema information is available.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfString> ListEntitiesAsync(this ILUSIDAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListEntitiesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get schema
            /// </summary>
            /// <remarks>
            /// Gets the schema and meta-data for a given entity
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='entity'>
            /// The name of a valid entity
            /// </param>
            public static Schema GetEntitySchema(this ILUSIDAPI operations, string entity)
            {
                return operations.GetEntitySchemaAsync(entity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get schema
            /// </summary>
            /// <remarks>
            /// Gets the schema and meta-data for a given entity
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='entity'>
            /// The name of a valid entity
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Schema> GetEntitySchemaAsync(this ILUSIDAPI operations, string entity, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEntitySchemaWithHttpMessagesAsync(entity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get property schema
            /// </summary>
            /// <remarks>
            /// Get the schemas for the provided list of property keys.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyKeys'>
            /// One or more property keys for which the schema is requested
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            public static PropertySchema GetPropertySchema(this ILUSIDAPI operations, IList<string> propertyKeys = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.GetPropertySchemaAsync(propertyKeys, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get property schema
            /// </summary>
            /// <remarks>
            /// Get the schemas for the provided list of property keys.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyKeys'>
            /// One or more property keys for which the schema is requested
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PropertySchema> GetPropertySchemaAsync(this ILUSIDAPI operations, IList<string> propertyKeys = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPropertySchemaWithHttpMessagesAsync(propertyKeys, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get value types
            /// </summary>
            /// <remarks>
            /// Gets the available value types for which a schema is available.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            public static ResourceListOfValueType GetValueTypes(this ILUSIDAPI operations, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetValueTypesAsync(sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get value types
            /// </summary>
            /// <remarks>
            /// Gets the available value types for which a schema is available.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfValueType> GetValueTypesAsync(this ILUSIDAPI operations, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetValueTypesWithHttpMessagesAsync(sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search portfolio groups
            /// </summary>
            /// <remarks>
            /// Search through all portfolio groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// A valid Elasticsearch 5.x request
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            public static ResourceListOfPortfolioGroup PortfolioGroupsSearch(this ILUSIDAPI operations, object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.PortfolioGroupsSearchAsync(request, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search portfolio groups
            /// </summary>
            /// <remarks>
            /// Search through all portfolio groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// A valid Elasticsearch 5.x request
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfPortfolioGroup> PortfolioGroupsSearchAsync(this ILUSIDAPI operations, object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PortfolioGroupsSearchWithHttpMessagesAsync(request, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search portfolios
            /// </summary>
            /// <remarks>
            /// Search through all portfolios
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// A valid Elasticsearch 5.x request
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            public static ResourceListOfPortfolioSearchResult PortfoliosSearch(this ILUSIDAPI operations, object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.PortfoliosSearchAsync(request, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search portfolios
            /// </summary>
            /// <remarks>
            /// Search through all portfolios
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// A valid Elasticsearch 5.x request
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfPortfolioSearchResult> PortfoliosSearchAsync(this ILUSIDAPI operations, object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PortfoliosSearchWithHttpMessagesAsync(request, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search property definitions
            /// </summary>
            /// <remarks>
            /// Search through all property definitions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// A valid Elasticsearch 5.x request
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            public static ResourceListOfPropertyDefinition PropertiesSearch(this ILUSIDAPI operations, object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.PropertiesSearchAsync(request, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search property definitions
            /// </summary>
            /// <remarks>
            /// Search through all property definitions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// A valid Elasticsearch 5.x request
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfPropertyDefinition> PropertiesSearchAsync(this ILUSIDAPI operations, object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PropertiesSearchWithHttpMessagesAsync(request, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List transaction types
            /// </summary>
            /// <remarks>
            /// Get the list of persisted transaction types
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ResourceListOfTransactionConfigurationData ListConfigurationTransactionTypes(this ILUSIDAPI operations)
            {
                return operations.ListConfigurationTransactionTypesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List transaction types
            /// </summary>
            /// <remarks>
            /// Get the list of persisted transaction types
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfTransactionConfigurationData> ListConfigurationTransactionTypesAsync(this ILUSIDAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConfigurationTransactionTypesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set transaction types
            /// </summary>
            /// <remarks>
            /// Set all transaction types to be used by the movements engine, for the
            /// organisation
            ///
            /// WARNING! Changing these mappings will have a material impact on how data,
            /// new and old, is processed and aggregated by LUSID. This will affect your
            /// whole organisation. Only change if you are fully aware of the implications
            /// of the change.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='types'>
            /// The complete set of transaction type definitions
            /// </param>
            public static ResourceListOfTransactionConfigurationData SetConfigurationTransactionTypes(this ILUSIDAPI operations, IList<TransactionConfigurationDataRequest> types = default(IList<TransactionConfigurationDataRequest>))
            {
                return operations.SetConfigurationTransactionTypesAsync(types).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set transaction types
            /// </summary>
            /// <remarks>
            /// Set all transaction types to be used by the movements engine, for the
            /// organisation
            ///
            /// WARNING! Changing these mappings will have a material impact on how data,
            /// new and old, is processed and aggregated by LUSID. This will affect your
            /// whole organisation. Only change if you are fully aware of the implications
            /// of the change.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='types'>
            /// The complete set of transaction type definitions
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfTransactionConfigurationData> SetConfigurationTransactionTypesAsync(this ILUSIDAPI operations, IList<TransactionConfigurationDataRequest> types = default(IList<TransactionConfigurationDataRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetConfigurationTransactionTypesWithHttpMessagesAsync(types, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create transaction type
            /// </summary>
            /// <remarks>
            /// Create a new transaction type by specifying a definition and the mappings
            /// to movements
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// A transaction type definition
            /// </param>
            public static ResourceListOfTransactionConfigurationData CreateConfigurationTransactionType(this ILUSIDAPI operations, TransactionConfigurationDataRequest type = default(TransactionConfigurationDataRequest))
            {
                return operations.CreateConfigurationTransactionTypeAsync(type).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create transaction type
            /// </summary>
            /// <remarks>
            /// Create a new transaction type by specifying a definition and the mappings
            /// to movements
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// A transaction type definition
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfTransactionConfigurationData> CreateConfigurationTransactionTypeAsync(this ILUSIDAPI operations, TransactionConfigurationDataRequest type = default(TransactionConfigurationDataRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateConfigurationTransactionTypeWithHttpMessagesAsync(type, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create transaction portfolio
            /// </summary>
            /// <remarks>
            /// Create a transaction portfolio in a specific scope
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope into which the transaction portfolio will be created
            /// </param>
            /// <param name='createRequest'>
            /// The transaction portfolio definition
            /// </param>
            public static Portfolio CreatePortfolio(this ILUSIDAPI operations, string scope, CreateTransactionPortfolioRequest createRequest = default(CreateTransactionPortfolioRequest))
            {
                return operations.CreatePortfolioAsync(scope, createRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create transaction portfolio
            /// </summary>
            /// <remarks>
            /// Create a transaction portfolio in a specific scope
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope into which the transaction portfolio will be created
            /// </param>
            /// <param name='createRequest'>
            /// The transaction portfolio definition
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Portfolio> CreatePortfolioAsync(this ILUSIDAPI operations, string scope, CreateTransactionPortfolioRequest createRequest = default(CreateTransactionPortfolioRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePortfolioWithHttpMessagesAsync(scope, createRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get portfolio details
            /// </summary>
            /// <remarks>
            /// Get the details document associated with a transaction portfolio
            ///
            /// When requesting details from a derived transaction portfolio, the returned
            /// set of details could come from a different transaction portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the data
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            public static PortfolioDetails GetDetails(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.GetDetailsAsync(scope, code, effectiveAt, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get portfolio details
            /// </summary>
            /// <remarks>
            /// Get the details document associated with a transaction portfolio
            ///
            /// When requesting details from a derived transaction portfolio, the returned
            /// set of details could come from a different transaction portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the data
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioDetails> GetDetailsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDetailsWithHttpMessagesAsync(scope, code, effectiveAt, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upsert details
            /// </summary>
            /// <remarks>
            /// Update the portfolio details for the specified transaction portfolios or
            /// add if it doesn't already exist (in the case of a derived transaction
            /// portfolio).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='details'>
            /// The set of details for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the change
            /// </param>
            public static PortfolioDetails UpsertPortfolioDetails(this ILUSIDAPI operations, string scope, string code, CreatePortfolioDetails details = default(CreatePortfolioDetails), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?))
            {
                return operations.UpsertPortfolioDetailsAsync(scope, code, details, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upsert details
            /// </summary>
            /// <remarks>
            /// Update the portfolio details for the specified transaction portfolios or
            /// add if it doesn't already exist (in the case of a derived transaction
            /// portfolio).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='details'>
            /// The set of details for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the change
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioDetails> UpsertPortfolioDetailsAsync(this ILUSIDAPI operations, string scope, string code, CreatePortfolioDetails details = default(CreatePortfolioDetails), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertPortfolioDetailsWithHttpMessagesAsync(scope, code, details, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upsert executions
            /// </summary>
            /// <remarks>
            /// Inserts new executions, or updates those already present
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='executions'>
            /// The executions to be updated
            /// </param>
            public static UpsertPortfolioExecutionsResponse UpsertExecutions(this ILUSIDAPI operations, string scope, string code, IList<ExecutionRequest> executions = default(IList<ExecutionRequest>))
            {
                return operations.UpsertExecutionsAsync(scope, code, executions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upsert executions
            /// </summary>
            /// <remarks>
            /// Inserts new executions, or updates those already present
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='executions'>
            /// The executions to be updated
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpsertPortfolioExecutionsResponse> UpsertExecutionsAsync(this ILUSIDAPI operations, string scope, string code, IList<ExecutionRequest> executions = default(IList<ExecutionRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertExecutionsWithHttpMessagesAsync(scope, code, executions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get holdings
            /// </summary>
            /// <remarks>
            /// Get the aggregate holdings of a transaction portfolio.  If no effectiveAt
            /// or asAt
            /// are supplied then values will be defaulted to the latest system time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='byTaxlots'>
            /// Option to expand holdings to return the underlying tax-lots
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the portfolio
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Optional. Keys for the instrument property values to be decorated onto the
            /// holdings
            /// </param>
            public static VersionedResourceListOfPortfolioHolding GetHoldings(this ILUSIDAPI operations, string scope, string code, bool? byTaxlots = default(bool?), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), IList<string> instrumentPropertyKeys = default(IList<string>))
            {
                return operations.GetHoldingsAsync(scope, code, byTaxlots, effectiveAt, asAt, sortBy, start, limit, filter, instrumentPropertyKeys).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get holdings
            /// </summary>
            /// <remarks>
            /// Get the aggregate holdings of a transaction portfolio.  If no effectiveAt
            /// or asAt
            /// are supplied then values will be defaulted to the latest system time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='byTaxlots'>
            /// Option to expand holdings to return the underlying tax-lots
            /// </param>
            /// <param name='effectiveAt'>
            /// Optional. The effective date of the portfolio
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Optional. Keys for the instrument property values to be decorated onto the
            /// holdings
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VersionedResourceListOfPortfolioHolding> GetHoldingsAsync(this ILUSIDAPI operations, string scope, string code, bool? byTaxlots = default(bool?), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), IList<string> instrumentPropertyKeys = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHoldingsWithHttpMessagesAsync(scope, code, byTaxlots, effectiveAt, asAt, sortBy, start, limit, filter, instrumentPropertyKeys, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set all holdings on a transaction portfolio
            /// </summary>
            /// <remarks>
            /// Prompt the creation of transactions in a specific transaction portfolio to
            /// bring all holdings to the specified targets
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the transaction portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the transaction portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date of the change
            /// </param>
            /// <param name='holdingAdjustments'>
            /// The complete set of holdings adjustments for the portfolio
            /// </param>
            public static AdjustHolding SetHoldings(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, IList<AdjustHoldingRequest> holdingAdjustments = default(IList<AdjustHoldingRequest>))
            {
                return operations.SetHoldingsAsync(scope, code, effectiveAt, holdingAdjustments).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set all holdings on a transaction portfolio
            /// </summary>
            /// <remarks>
            /// Prompt the creation of transactions in a specific transaction portfolio to
            /// bring all holdings to the specified targets
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the transaction portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the transaction portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date of the change
            /// </param>
            /// <param name='holdingAdjustments'>
            /// The complete set of holdings adjustments for the portfolio
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AdjustHolding> SetHoldingsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, IList<AdjustHoldingRequest> holdingAdjustments = default(IList<AdjustHoldingRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetHoldingsWithHttpMessagesAsync(scope, code, effectiveAt, holdingAdjustments, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adjust holdings
            /// </summary>
            /// <remarks>
            /// Adjust one or more holdings in a transaction portfolio
            ///
            /// Prompt the creation of transactions in a specific transaction portfolio to
            /// bring selected holdings to the specified targets
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date of the change
            /// </param>
            /// <param name='holdingAdjustments'>
            /// The selected set of holdings adjustments
            /// </param>
            public static AdjustHolding AdjustHoldings(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, IList<AdjustHoldingRequest> holdingAdjustments = default(IList<AdjustHoldingRequest>))
            {
                return operations.AdjustHoldingsAsync(scope, code, effectiveAt, holdingAdjustments).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adjust holdings
            /// </summary>
            /// <remarks>
            /// Adjust one or more holdings in a transaction portfolio
            ///
            /// Prompt the creation of transactions in a specific transaction portfolio to
            /// bring selected holdings to the specified targets
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date of the change
            /// </param>
            /// <param name='holdingAdjustments'>
            /// The selected set of holdings adjustments
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AdjustHolding> AdjustHoldingsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, IList<AdjustHoldingRequest> holdingAdjustments = default(IList<AdjustHoldingRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AdjustHoldingsWithHttpMessagesAsync(scope, code, effectiveAt, holdingAdjustments, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel holdings adjustments
            /// </summary>
            /// <remarks>
            /// Cancel previous adjust-holdings for the portfolio for a specific date
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date of the change
            /// </param>
            public static DeletedEntityResponse CancelAdjustHoldings(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt)
            {
                return operations.CancelAdjustHoldingsAsync(scope, code, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel holdings adjustments
            /// </summary>
            /// <remarks>
            /// Cancel previous adjust-holdings for the portfolio for a specific date
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date of the change
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> CancelAdjustHoldingsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelAdjustHoldingsWithHttpMessagesAsync(scope, code, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List holdings adjustments
            /// </summary>
            /// <remarks>
            /// Get holdings adjustments from a transaction portfolio in an interval of
            /// effective time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='fromEffectiveAt'>
            /// Holdings adjustments between this time (inclusive) and the toEffectiveAt
            /// are returned.
            /// </param>
            /// <param name='toEffectiveAt'>
            /// Holdings adjustments between this time (inclusive) and the fromEffectiveAt
            /// are returned.
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            public static ResourceListOfHoldingsAdjustmentHeader ListHoldingsAdjustments(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromEffectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? toEffectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.ListHoldingsAdjustmentsAsync(scope, code, fromEffectiveAt, toEffectiveAt, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List holdings adjustments
            /// </summary>
            /// <remarks>
            /// Get holdings adjustments from a transaction portfolio in an interval of
            /// effective time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='fromEffectiveAt'>
            /// Holdings adjustments between this time (inclusive) and the toEffectiveAt
            /// are returned.
            /// </param>
            /// <param name='toEffectiveAt'>
            /// Holdings adjustments between this time (inclusive) and the fromEffectiveAt
            /// are returned.
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfHoldingsAdjustmentHeader> ListHoldingsAdjustmentsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromEffectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? toEffectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHoldingsAdjustmentsWithHttpMessagesAsync(scope, code, fromEffectiveAt, toEffectiveAt, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get holding adjustment
            /// </summary>
            /// <remarks>
            /// Get a holdings adjustment for a transaction portfolio at a specific
            /// effective time.
            ///
            /// A holdings adjustment definition will only be returned if one exists for
            /// the specified effective time
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective time of the holdings adjustment
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            public static HoldingsAdjustment GetHoldingsAdjustment(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.GetHoldingsAdjustmentAsync(scope, code, effectiveAt, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get holding adjustment
            /// </summary>
            /// <remarks>
            /// Get a holdings adjustment for a transaction portfolio at a specific
            /// effective time.
            ///
            /// A holdings adjustment definition will only be returned if one exists for
            /// the specified effective time
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective time of the holdings adjustment
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HoldingsAdjustment> GetHoldingsAdjustmentAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHoldingsAdjustmentWithHttpMessagesAsync(scope, code, effectiveAt, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get transactions
            /// </summary>
            /// <remarks>
            /// Get the transactions from a transaction portfolio
            ///
            /// When the requested portfolio is a derived transaction portfolio, the
            /// returned set of transactions is the union set of all transactions of the
            /// parent (and ancestors) and the specified portfolio.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='fromTransactionDate'>
            /// Optional. Limit the returned transactions to those with a transaction date
            /// equal or later than this date
            /// </param>
            /// <param name='toTransactionDate'>
            /// Optional. Limit the returned transactions to those with a transaction date
            /// equal or before this date
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Optional. Keys for the instrument property values that will be decorated
            /// onto the transactions
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            public static VersionedResourceListOfTransaction GetTransactions(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromTransactionDate = default(System.DateTimeOffset?), System.DateTimeOffset? toTransactionDate = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), IList<string> instrumentPropertyKeys = default(IList<string>), string filter = default(string))
            {
                return operations.GetTransactionsAsync(scope, code, fromTransactionDate, toTransactionDate, asAt, sortBy, start, limit, instrumentPropertyKeys, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get transactions
            /// </summary>
            /// <remarks>
            /// Get the transactions from a transaction portfolio
            ///
            /// When the requested portfolio is a derived transaction portfolio, the
            /// returned set of transactions is the union set of all transactions of the
            /// parent (and ancestors) and the specified portfolio.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='fromTransactionDate'>
            /// Optional. Limit the returned transactions to those with a transaction date
            /// equal or later than this date
            /// </param>
            /// <param name='toTransactionDate'>
            /// Optional. Limit the returned transactions to those with a transaction date
            /// equal or before this date
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Optional. Keys for the instrument property values that will be decorated
            /// onto the transactions
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VersionedResourceListOfTransaction> GetTransactionsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromTransactionDate = default(System.DateTimeOffset?), System.DateTimeOffset? toTransactionDate = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), IList<string> instrumentPropertyKeys = default(IList<string>), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionsWithHttpMessagesAsync(scope, code, fromTransactionDate, toTransactionDate, asAt, sortBy, start, limit, instrumentPropertyKeys, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upsert transactions into the specified transaction portfolio
            /// </summary>
            /// <remarks>
            /// Upsert transactions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code for the portfolio
            /// </param>
            /// <param name='transactions'>
            /// The transactions to be upserted
            /// </param>
            public static UpsertPortfolioTransactionsResponse UpsertTransactions(this ILUSIDAPI operations, string scope, string code, IList<TransactionRequest> transactions = default(IList<TransactionRequest>))
            {
                return operations.UpsertTransactionsAsync(scope, code, transactions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upsert transactions into the specified transaction portfolio
            /// </summary>
            /// <remarks>
            /// Upsert transactions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code for the portfolio
            /// </param>
            /// <param name='transactions'>
            /// The transactions to be upserted
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpsertPortfolioTransactionsResponse> UpsertTransactionsAsync(this ILUSIDAPI operations, string scope, string code, IList<TransactionRequest> transactions = default(IList<TransactionRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertTransactionsWithHttpMessagesAsync(scope, code, transactions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete transactions
            /// </summary>
            /// <remarks>
            /// Delete one or more transactions from a transaction portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='transactionIds'>
            /// Ids of transactions to delete
            /// </param>
            public static DeletedEntityResponse DeleteTransactions(this ILUSIDAPI operations, string scope, string code, IList<string> transactionIds = default(IList<string>))
            {
                return operations.DeleteTransactionsAsync(scope, code, transactionIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete transactions
            /// </summary>
            /// <remarks>
            /// Delete one or more transactions from a transaction portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='transactionIds'>
            /// Ids of transactions to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeleteTransactionsAsync(this ILUSIDAPI operations, string scope, string code, IList<string> transactionIds = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTransactionsWithHttpMessagesAsync(scope, code, transactionIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add transaction properties
            /// </summary>
            /// <remarks>
            /// Upsert one or more transaction properties to a single transaction in a
            /// portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='transactionId'>
            /// Id of transaction
            /// </param>
            /// <param name='transactionProperties'>
            /// Transaction properties values
            /// </param>
            public static AddTransactionPropertyResponse AddTransactionProperty(this ILUSIDAPI operations, string scope, string code, string transactionId, IDictionary<string, PerpetualPropertyValue> transactionProperties = default(IDictionary<string, PerpetualPropertyValue>))
            {
                return operations.AddTransactionPropertyAsync(scope, code, transactionId, transactionProperties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add transaction properties
            /// </summary>
            /// <remarks>
            /// Upsert one or more transaction properties to a single transaction in a
            /// portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='transactionId'>
            /// Id of transaction
            /// </param>
            /// <param name='transactionProperties'>
            /// Transaction properties values
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddTransactionPropertyResponse> AddTransactionPropertyAsync(this ILUSIDAPI operations, string scope, string code, string transactionId, IDictionary<string, PerpetualPropertyValue> transactionProperties = default(IDictionary<string, PerpetualPropertyValue>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddTransactionPropertyWithHttpMessagesAsync(scope, code, transactionId, transactionProperties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete transaction property
            /// </summary>
            /// <remarks>
            /// Delete a property value from a single transaction in a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='transactionId'>
            /// Id of the transaction to delete the property from
            /// </param>
            /// <param name='transactionPropertyKey'>
            /// The key of the property to be deleted
            /// </param>
            public static DeletedEntityResponse DeletePropertyFromTransaction(this ILUSIDAPI operations, string scope, string code, string transactionId, string transactionPropertyKey = default(string))
            {
                return operations.DeletePropertyFromTransactionAsync(scope, code, transactionId, transactionPropertyKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete transaction property
            /// </summary>
            /// <remarks>
            /// Delete a property value from a single transaction in a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='transactionId'>
            /// Id of the transaction to delete the property from
            /// </param>
            /// <param name='transactionPropertyKey'>
            /// The key of the property to be deleted
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePropertyFromTransactionAsync(this ILUSIDAPI operations, string scope, string code, string transactionId, string transactionPropertyKey = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePropertyFromTransactionWithHttpMessagesAsync(scope, code, transactionId, transactionPropertyKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Build output transactions
            /// </summary>
            /// <remarks>
            /// Builds and returns the collection of all types of transactions that affect
            /// the holdings of a portfolio in to a set of output transactions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Optional. Keys for the instrument property values to be decorated onto the
            /// transactions
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='parameters'>
            /// Optional. Transaction query parameters
            /// </param>
            public static VersionedResourceListOfOutputTransaction BuildTransactions(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), IList<string> instrumentPropertyKeys = default(IList<string>), string filter = default(string), TransactionQueryParameters parameters = default(TransactionQueryParameters))
            {
                return operations.BuildTransactionsAsync(scope, code, asAt, sortBy, start, limit, instrumentPropertyKeys, filter, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Build output transactions
            /// </summary>
            /// <remarks>
            /// Builds and returns the collection of all types of transactions that affect
            /// the holdings of a portfolio in to a set of output transactions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The code of the portfolio
            /// </param>
            /// <param name='asAt'>
            /// Optional. The AsAt date of the data
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Order the results by these fields. Use use the '-' sign to denote
            /// descending order e.g. -MyFieldName
            /// </param>
            /// <param name='start'>
            /// Optional. When paginating, skip this number of results
            /// </param>
            /// <param name='limit'>
            /// Optional. When paginating, limit the number of returned results to this
            /// many.
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Optional. Keys for the instrument property values to be decorated onto the
            /// transactions
            /// </param>
            /// <param name='filter'>
            /// Optional. Expression to filter the result set
            /// </param>
            /// <param name='parameters'>
            /// Optional. Transaction query parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VersionedResourceListOfOutputTransaction> BuildTransactionsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), IList<string> instrumentPropertyKeys = default(IList<string>), string filter = default(string), TransactionQueryParameters parameters = default(TransactionQueryParameters), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BuildTransactionsWithHttpMessagesAsync(scope, code, asAt, sortBy, start, limit, instrumentPropertyKeys, filter, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
